
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\002\007\000\002\003" +
    "\011\000\002\003\011\000\002\004\005\000\002\004\002" +
    "\000\002\005\005\000\002\005\004\000\002\006\006\000" +
    "\002\011\010\000\002\011\006\000\002\007\004\000\002" +
    "\010\002\000\002\010\013\000\002\014\005\000\002\014" +
    "\003\000\002\020\002\000\002\015\010\000\002\021\002" +
    "\000\002\015\007\000\002\016\011\000\002\016\007\000" +
    "\002\013\002\000\002\012\002\000\002\017\007\000\002" +
    "\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\010\005\ufffc\006\ufffc\007\ufffc\001\002\000" +
    "\010\005\110\006\107\007\106\001\002\000\004\002\105" +
    "\001\002\000\004\004\007\001\002\000\004\026\012\001" +
    "\002\000\004\026\012\001\002\000\006\004\027\026\012" +
    "\001\002\000\004\012\013\001\002\000\004\026\015\001" +
    "\002\000\006\013\022\021\021\001\002\000\004\011\016" +
    "\001\002\000\004\027\017\001\002\000\004\014\020\001" +
    "\002\000\006\013\ufff7\021\ufff7\001\002\000\004\026\023" +
    "\001\002\000\006\004\ufff9\026\ufff9\001\002\000\004\011" +
    "\024\001\002\000\004\027\025\001\002\000\004\014\026" +
    "\001\002\000\006\013\ufff8\021\ufff8\001\002\000\006\022" +
    "\ufff5\026\ufff5\001\002\000\004\026\012\001\002\000\006" +
    "\004\ufffb\026\ufffb\001\002\000\004\002\000\001\002\000" +
    "\006\022\035\026\036\001\002\000\006\002\ufff6\026\077" +
    "\001\002\000\004\015\065\001\002\000\004\017\uffef\001" +
    "\002\000\004\017\040\001\002\000\004\023\uffea\001\002" +
    "\000\004\023\061\001\002\000\006\010\043\020\044\001" +
    "\002\000\006\002\uffee\026\uffee\001\002\000\004\023\uffeb" +
    "\001\002\000\004\023\046\001\002\000\004\027\047\001" +
    "\002\000\004\025\050\001\002\000\004\026\052\001\002" +
    "\000\010\010\uffed\020\uffed\021\055\001\002\000\004\027" +
    "\053\001\002\000\004\024\054\001\002\000\010\010\uffe8" +
    "\020\uffe8\021\uffe8\001\002\000\004\026\056\001\002\000" +
    "\004\027\057\001\002\000\004\024\060\001\002\000\010" +
    "\010\uffe9\020\uffe9\021\uffe9\001\002\000\004\027\062\001" +
    "\002\000\004\025\063\001\002\000\004\026\052\001\002" +
    "\000\010\010\uffec\020\uffec\021\055\001\002\000\004\026" +
    "\066\001\002\000\004\016\067\001\002\000\004\015\070" +
    "\001\002\000\004\026\072\001\002\000\006\016\074\021" +
    "\073\001\002\000\006\016\ufff2\021\ufff2\001\002\000\004" +
    "\026\076\001\002\000\004\010\075\001\002\000\006\022" +
    "\ufff4\026\ufff4\001\002\000\006\016\ufff3\021\ufff3\001\002" +
    "\000\004\017\ufff1\001\002\000\004\017\101\001\002\000" +
    "\004\023\uffea\001\002\000\006\010\103\020\044\001\002" +
    "\000\006\002\ufff0\026\ufff0\001\002\000\006\004\ufffa\026" +
    "\ufffa\001\002\000\004\002\001\001\002\000\004\010\117" +
    "\001\002\000\004\010\112\001\002\000\004\010\111\001" +
    "\002\000\012\004\ufffd\005\ufffd\006\ufffd\007\ufffd\001\002" +
    "\000\006\005\ufffc\007\ufffc\001\002\000\006\005\110\007" +
    "\114\001\002\000\004\010\115\001\002\000\006\004\ufffc" +
    "\005\ufffc\001\002\000\006\004\ufffe\005\110\001\002\000" +
    "\006\005\ufffc\006\ufffc\001\002\000\006\005\110\006\121" +
    "\001\002\000\004\010\122\001\002\000\006\004\ufffc\005" +
    "\ufffc\001\002\000\006\004\uffff\005\110\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\010\002\004\003\005\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\010\006\007\001\001\000\004\006\103\001\001\000" +
    "\004\006\027\001\001\000\002\001\001\000\004\011\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\031\010\032" +
    "\001\001\000\004\006\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\036\001\001\000\002\001" +
    "\001\000\006\012\040\016\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\077\001\001" +
    "\000\002\001\001\000\006\012\040\016\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\115\001\001\000" +
    "\002\001\001\000\004\004\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\122\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	table = new HashMap<String, HashMap<String, Integer>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


	public HashMap<String, HashMap<String, Integer>> table;
	
    public void syntax_error(Symbol current_symbol) {
        StringBuffer m = new StringBuffer("Error");

        if(current_symbol.left != -1) {
            m.append(" in line " + (current_symbol.left + 1));
            m.append(" in column " + (current_symbol.right + 1));
        }
        m.append(", symbol: " + current_symbol);
        m.append(": Syntax Error");

        System.err.println(m);
    }
	
	public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if(info instanceof Symbol) {
            if(((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if(((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }

    public Object stack(int position) {
        return (((Symbol) stack.elementAt(tos + position)).value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP cars SEP race 
            { parser.Tree.reduce(5,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= tok1_list TOK3 S tok1_list TOK2 S tok1_list 
            { parser.Tree.reduce(7,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= tok1_list TOK2 S tok1_list TOK3 S tok1_list 
            { parser.Tree.reduce(7,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tok1_list ::= tok1_list TOK1 S 
            { parser.Tree.reduce(3,"tok1_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tok1_list ::= 
            { parser.Tree.reduce(0,"tok1_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cars ::= cars car_name car_name 
            { parser.Tree.reduce(3,"cars",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cars",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cars ::= car_name car_name 
            { parser.Tree.reduce(2,"cars",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cars",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // car_name ::= QSTRING BO speed_list BC 
            { parser.Tree.reduce(4,"car_name",0);
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap v = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.table.put(k, v);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("car_name",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // speed_list ::= speed_list CM QSTRING EQ UINT MS 
            { parser.Tree.reduce(6,"speed_list",0);
              HashMap RESULT =null;
		int tableft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tabright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		HashMap tab = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                tab.put(k,v);
                RESULT = tab;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("speed_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // speed_list ::= QSTRING EQ UINT MS 
            { parser.Tree.reduce(4,"speed_list",0);
              HashMap RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
               RESULT = new HashMap<String,Integer>();
               RESULT.put(k,v);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("speed_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // race ::= print_min_max performances 
            { parser.Tree.reduce(2,"race",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object[] x = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            System.out.println("WINNER: " + x[0] + " " + x[1]);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("race",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // print_min_max ::= 
            { parser.Tree.reduce(0,"print_min_max",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_min_max",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // print_min_max ::= print_min_max PRINT_MIN_MAX RO QSTRING RC RO section_names RC S 
            { parser.Tree.reduce(9,"print_min_max",0);
              Object RESULT =null;
		int min_maxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int min_maxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object[] min_max = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    System.out.println("MIN: " + min_max[0] + " MAX: " + min_max[1]);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_min_max",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // section_names ::= section_names CM QSTRING 
            { parser.Tree.reduce(3,"section_names",0);
              Object[] RESULT =null;
		int max_minleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int max_minright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object[] max_min = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String car = (String)parser.stack(-5);
                HashMap<String, Integer> map = parser.table.get(car);
                Integer speed = (Integer)map.get(s);
                RESULT = new Object[2];
                if(speed < (Integer)max_min[0]) {
                    RESULT[0] = speed;
                    RESULT[1] = max_min[1];
                } else if(speed > (Integer)max_min[1]) {
                    RESULT[0] = max_min[0];
                    RESULT[1] = speed;
                } else {
                    RESULT[0] = max_min[0];
                    RESULT[1] = max_min[1];
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("section_names",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // section_names ::= QSTRING 
            { parser.Tree.reduce(1,"section_names",0);
              Object[] RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String car = (String)parser.stack(-3);
                HashMap<String, Integer> map = parser.table.get(car);
                Integer speed = (Integer)map.get(s);
                RESULT = new Object[2];
                RESULT[0] = speed;
                RESULT[1] = speed;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("section_names",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$0 ::= 
            { parser.Tree.reduce(0,"NT$0",0);
              Object[] RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object[] p = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    System.out.println(car);    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // performances ::= performances QSTRING NT$0 ARROW parts S 
            { parser.Tree.reduce(6,"performances",0);
              Object[] RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object[]) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object[] p = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    System.out.println("TOTAL: " + x + " s");
                    RESULT = new Object[2];
                    if((float)p[1] < x){
                        RESULT[0] = p[0];
                        RESULT[1] = p[1];
                    } else {
                        RESULT[0] = car;
                        RESULT[1] = x;
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("performances",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$1 ::= 
            { parser.Tree.reduce(0,"NT$1",0);
              Object[] RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                System.out.println(car);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // performances ::= QSTRING NT$1 ARROW parts S 
            { parser.Tree.reduce(5,"performances",0);
              Object[] RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object[]) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.out.println("TOTAL: " + x + " s");
                RESULT = new Object[2];
                RESULT[0] = car;
                RESULT[1] = x;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("performances",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parts ::= parts PIPE NT1 PART UINT COL drive_stats 
            { parser.Tree.reduce(7,"parts",0);
              Float RESULT =null;
		int totleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int totright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Float tot = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer u = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("PART" + u + ": " + x +" s" );
                RESULT = tot + x;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parts",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parts ::= NT0 PART UINT COL drive_stats 
            { parser.Tree.reduce(5,"parts",0);
              Float RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer u = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("PART" + u + ": " + x +" s" );
                RESULT = x;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parts",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT1 ::= 
            { parser.Tree.reduce(0,"NT1",0);
              String RESULT =null;
		
    RESULT = (String)parser.stack(-4);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT0 ::= 
            { parser.Tree.reduce(0,"NT0",0);
              String RESULT =null;
		
    RESULT= (String)parser.stack(-2);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT0",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // drive_stats ::= drive_stats CM QSTRING UINT M 
            { parser.Tree.reduce(5,"drive_stats",0);
              Float RESULT =null;
		int totleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int totright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Float tot = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                String car = (String)parser.stack(-8);
                HashMap<String, Integer> map = parser.table.get(car);
                Integer speed = (Integer)map.get(s);
                float result = (float)x.intValue() / (float)speed.intValue();
                RESULT = result + tot;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drive_stats",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // drive_stats ::= QSTRING UINT M 
            { parser.Tree.reduce(3,"drive_stats",0);
              Float RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                String car = (String)parser.stack(-6);
                HashMap<String, Integer> map = parser.table.get(car);
                Integer speed = (Integer)map.get(s);
                float result = (float)x.intValue() / (float)speed.intValue();
                RESULT = result;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drive_stats",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
