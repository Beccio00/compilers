/* The following code was generated by JFlex 1.7.0 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>./scanner.jflex</tt>
 */
class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\41\1\41\1\1\22\0\1\3\1\0\1\14"+
    "\1\0\1\17\1\20\2\0\1\25\1\26\1\21\1\22\1\32\1\24"+
    "\1\15\1\6\1\5\1\7\1\4\1\12\1\11\4\13\1\10\1\27"+
    "\1\23\5\0\4\16\1\33\1\16\10\0\1\36\2\0\1\35\2\0"+
    "\1\34\5\0\1\30\1\0\1\31\3\0\6\16\1\40\3\0\1\37"+
    "\31\0\1\41\u1fa2\0\1\41\1\41\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\3\3\1\1\1\4\3\1\1\5"+
    "\1\1\1\6\1\7\1\10\1\11\2\1\1\3\3\0"+
    "\1\12\6\0\1\13\1\3\7\0\2\3\1\14\1\15"+
    "\32\0\1\16\105\0\1\17\167\0\1\20\13\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\42\0\146\0\210\0\252\0\314"+
    "\0\42\0\356\0\u0110\0\u0132\0\42\0\u0154\0\42\0\42"+
    "\0\42\0\42\0\u0176\0\u0198\0\u01ba\0\u01dc\0\210\0\314"+
    "\0\42\0\u01fe\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8\0\42"+
    "\0\u02ca\0\u02ec\0\u030e\0\u0330\0\u0352\0\u0374\0\u0396\0\u03b8"+
    "\0\u03da\0\u03fc\0\42\0\u01fe\0\u041e\0\u0440\0\u0462\0\u0484"+
    "\0\u04a6\0\u04c8\0\u04ea\0\u050c\0\u052e\0\u0550\0\u0572\0\u0594"+
    "\0\u05b6\0\u05d8\0\u05fa\0\u061c\0\u063e\0\u0660\0\u0682\0\u06a4"+
    "\0\u06c6\0\u06e8\0\u070a\0\u072c\0\u074e\0\u0770\0\42\0\u0792"+
    "\0\u07b4\0\u07d6\0\u07f8\0\u081a\0\u083c\0\u085e\0\u0880\0\u08a2"+
    "\0\u08c4\0\u08e6\0\u0908\0\u092a\0\u094c\0\u096e\0\u0990\0\u09b2"+
    "\0\u09d4\0\u09f6\0\u0a18\0\u0a3a\0\u0a5c\0\u0a7e\0\u0aa0\0\u0ac2"+
    "\0\u0ae4\0\u0b06\0\u0b28\0\u0b4a\0\u0b6c\0\u0b8e\0\u0bb0\0\u0bd2"+
    "\0\u0bf4\0\u0c16\0\u0c38\0\u0c5a\0\u0c7c\0\u0c9e\0\u0cc0\0\u0ce2"+
    "\0\u0d04\0\u0d26\0\u0d48\0\u0d6a\0\u0d8c\0\u0dae\0\u0dd0\0\u0df2"+
    "\0\u0e14\0\u0e36\0\u0e58\0\u0e7a\0\u0e9c\0\u0ebe\0\u0ee0\0\u0f02"+
    "\0\u0f24\0\u0f46\0\u0f68\0\u0f8a\0\u0fac\0\u0fce\0\u0ff0\0\u1012"+
    "\0\u1034\0\u1056\0\u1078\0\u109a\0\42\0\u10bc\0\u10de\0\u1100"+
    "\0\u1122\0\u1144\0\u1166\0\u1188\0\u11aa\0\u11cc\0\u11ee\0\u1210"+
    "\0\u1232\0\u1254\0\u1276\0\u1298\0\u12ba\0\u12dc\0\u12fe\0\u1320"+
    "\0\u1342\0\u1364\0\u1386\0\u13a8\0\u13ca\0\u13ec\0\u140e\0\u1430"+
    "\0\u1452\0\u1474\0\u1496\0\u14b8\0\u14da\0\u14fc\0\u151e\0\u1540"+
    "\0\u1562\0\u1584\0\u15a6\0\u15c8\0\u15ea\0\u160c\0\u162e\0\u1650"+
    "\0\u1672\0\u1694\0\u16b6\0\u16d8\0\u16fa\0\u171c\0\u173e\0\u1760"+
    "\0\u1782\0\u17a4\0\u17c6\0\u17e8\0\u180a\0\u182c\0\u184e\0\u1870"+
    "\0\u1892\0\u18b4\0\u18d6\0\u18f8\0\u191a\0\u193c\0\u195e\0\u1980"+
    "\0\u19a2\0\u19c4\0\u19e6\0\u1a08\0\u1a2a\0\u1a4c\0\u1a6e\0\u1a90"+
    "\0\u1ab2\0\u1ad4\0\u1af6\0\u1b18\0\u1b3a\0\u1b5c\0\u1b7e\0\u1ba0"+
    "\0\u1bc2\0\u1be4\0\u1c06\0\u1c28\0\u1c4a\0\u1c6c\0\u1c8e\0\u1cb0"+
    "\0\u1cd2\0\u1cf4\0\u1d16\0\u1d38\0\u1d5a\0\u1d7c\0\u1d9e\0\u1dc0"+
    "\0\u1de2\0\u1e04\0\u1e26\0\u1e48\0\u1e6a\0\u1e8c\0\u1eae\0\u1ed0"+
    "\0\u1ef2\0\u1f14\0\u1f36\0\u1f58\0\u1f7a\0\u1f9c\0\u1fbe\0\u1fe0"+
    "\0\u2002\0\u2024\0\u2046\0\u2068\0\42\0\u208a\0\u20ac\0\u20ce"+
    "\0\u20f0\0\u2112\0\u2134\0\u2156\0\u2178\0\u219a\0\u21bc\0\u21de";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\2\5\7\1\10"+
    "\1\11\1\2\1\12\1\13\1\14\1\2\1\15\1\2"+
    "\1\16\1\2\1\17\1\20\1\21\1\22\1\23\3\2"+
    "\1\24\1\2\45\0\1\4\43\0\1\7\1\25\1\0"+
    "\5\7\1\0\1\26\30\0\2\27\1\0\5\27\1\0"+
    "\1\26\30\0\2\7\1\0\5\7\1\0\1\26\24\0"+
    "\14\30\1\31\25\30\17\0\1\32\42\0\1\33\1\34"+
    "\40\0\1\35\42\0\1\36\54\0\1\37\45\0\1\40"+
    "\5\0\1\41\1\7\1\0\5\7\1\0\1\26\30\0"+
    "\2\42\1\0\5\42\45\0\1\43\42\0\1\44\41\0"+
    "\1\45\42\0\1\46\44\0\1\47\52\0\1\50\10\0"+
    "\1\51\1\7\1\0\3\7\1\52\1\7\1\0\1\26"+
    "\30\0\2\53\1\0\5\53\45\0\1\54\42\0\1\55"+
    "\42\0\1\56\40\0\1\57\21\0\24\47\1\60\15\47"+
    "\36\0\1\61\7\0\2\7\1\62\5\7\1\0\1\26"+
    "\30\0\2\7\1\63\5\7\1\0\1\26\44\0\1\64"+
    "\41\0\1\65\42\0\1\66\20\0\21\47\1\67\2\47"+
    "\1\60\15\47\6\0\1\70\42\0\1\71\37\0\1\72"+
    "\54\0\1\73\42\0\1\74\40\0\1\75\21\0\24\47"+
    "\1\60\1\47\1\4\13\47\37\0\1\76\6\0\1\77"+
    "\2\0\1\100\36\0\1\101\2\0\1\102\2\0\1\103"+
    "\47\0\1\104\41\0\1\105\42\0\1\106\60\0\1\107"+
    "\7\0\1\110\41\0\1\111\41\0\1\112\41\0\1\113"+
    "\41\0\1\114\53\0\1\115\42\0\1\116\40\0\1\117"+
    "\25\0\1\120\1\121\1\0\1\122\2\0\1\123\33\0"+
    "\1\120\2\0\1\124\2\0\1\125\33\0\1\126\1\121"+
    "\1\0\1\127\36\0\2\120\1\0\1\120\2\0\1\123"+
    "\33\0\1\120\1\121\1\0\1\120\2\0\1\125\33\0"+
    "\2\130\1\0\5\130\2\0\1\130\1\0\1\131\12\0"+
    "\1\130\12\0\2\130\1\0\5\130\2\0\1\130\1\0"+
    "\1\132\12\0\1\130\12\0\2\130\1\0\5\130\2\0"+
    "\1\130\2\0\1\133\11\0\1\130\12\0\2\134\1\0"+
    "\5\134\32\0\1\134\2\0\5\134\32\0\2\134\1\0"+
    "\3\134\1\0\1\134\33\0\1\134\1\0\1\134\42\0"+
    "\1\134\2\0\1\134\33\0\1\134\40\0\2\134\1\0"+
    "\1\134\1\0\3\134\32\0\2\134\1\0\2\134\1\0"+
    "\2\134\32\0\2\135\1\0\5\135\2\0\1\135\14\0"+
    "\1\135\26\0\1\136\42\0\1\137\40\0\1\140\40\0"+
    "\2\141\25\0\2\142\1\0\5\142\2\0\1\142\3\0"+
    "\1\143\10\0\1\142\12\0\2\130\1\0\5\130\2\0"+
    "\1\130\1\0\1\144\12\0\1\130\12\0\2\130\1\0"+
    "\5\130\2\0\1\130\1\0\1\145\12\0\1\130\12\0"+
    "\2\130\1\0\5\130\2\0\1\130\2\0\1\146\11\0"+
    "\1\130\12\0\1\147\41\0\2\150\1\0\5\150\2\0"+
    "\1\150\3\0\1\143\10\0\1\150\12\0\2\151\1\0"+
    "\5\151\2\0\1\151\14\0\1\151\26\0\1\152\42\0"+
    "\1\153\40\0\1\154\26\0\1\155\40\0\2\156\1\0"+
    "\5\156\2\0\1\156\14\0\1\156\12\0\2\157\1\0"+
    "\5\157\2\0\1\157\14\0\1\157\12\0\2\130\1\0"+
    "\5\130\2\0\1\130\1\0\1\160\12\0\1\130\12\0"+
    "\2\130\1\0\5\130\2\0\1\130\1\0\1\161\12\0"+
    "\1\130\12\0\2\130\1\0\5\130\2\0\1\130\2\0"+
    "\1\162\11\0\1\130\12\0\1\163\41\0\2\164\1\0"+
    "\5\164\2\0\1\164\14\0\1\164\12\0\2\165\1\0"+
    "\5\165\2\0\1\165\3\0\1\166\10\0\1\165\26\0"+
    "\1\167\42\0\1\170\40\0\1\171\25\0\1\172\5\0"+
    "\1\173\51\0\1\143\23\0\2\174\1\0\5\174\2\0"+
    "\1\174\3\0\1\166\10\0\1\174\12\0\2\175\1\0"+
    "\5\175\2\0\1\175\14\0\1\175\12\0\2\130\1\0"+
    "\5\130\2\0\1\130\1\0\1\176\12\0\1\130\12\0"+
    "\2\130\1\0\5\130\2\0\1\130\1\0\1\177\12\0"+
    "\1\130\12\0\2\130\1\0\5\130\2\0\1\130\2\0"+
    "\1\200\11\0\1\130\14\0\1\201\41\0\1\202\37\0"+
    "\2\203\1\0\5\203\2\0\1\203\14\0\1\203\12\0"+
    "\2\204\1\0\5\204\2\0\1\204\14\0\1\204\26\0"+
    "\1\205\42\0\1\206\40\0\1\207\30\0\1\210\37\0"+
    "\1\211\40\0\2\212\1\0\5\212\2\0\1\212\14\0"+
    "\1\212\12\0\2\213\1\0\5\213\2\0\1\213\3\0"+
    "\1\214\1\215\7\0\1\213\12\0\2\130\1\0\5\130"+
    "\2\0\1\130\1\0\1\216\12\0\1\130\12\0\2\130"+
    "\1\0\5\130\2\0\1\130\1\0\1\217\12\0\1\130"+
    "\12\0\2\130\1\0\5\130\2\0\1\130\2\0\1\220"+
    "\11\0\1\130\12\0\1\221\2\0\1\222\36\0\1\223"+
    "\2\0\1\224\2\0\1\225\51\0\1\166\23\0\2\226"+
    "\1\0\5\226\2\0\1\226\3\0\1\214\1\215\7\0"+
    "\1\226\12\0\2\227\1\0\5\227\2\0\1\227\14\0"+
    "\1\227\26\0\1\230\42\0\1\231\40\0\1\232\27\0"+
    "\1\233\41\0\1\234\41\0\1\235\41\0\1\236\41\0"+
    "\1\237\37\0\2\240\1\0\5\240\2\0\1\240\14\0"+
    "\1\240\12\0\2\241\1\0\5\241\2\0\1\241\14\0"+
    "\1\241\12\0\2\130\1\0\5\130\2\0\1\130\1\0"+
    "\1\242\12\0\1\130\12\0\2\130\1\0\5\130\2\0"+
    "\1\130\1\0\1\243\12\0\1\130\12\0\2\130\1\0"+
    "\5\130\2\0\1\130\2\0\1\244\11\0\1\130\12\0"+
    "\1\245\1\246\1\0\1\247\2\0\1\250\33\0\1\245"+
    "\2\0\1\251\2\0\1\252\33\0\1\253\1\246\1\0"+
    "\1\254\36\0\2\245\1\0\1\245\2\0\1\250\33\0"+
    "\1\245\1\246\1\0\1\245\2\0\1\252\33\0\2\255"+
    "\1\0\5\255\2\0\1\255\14\0\1\255\12\0\2\256"+
    "\1\0\5\256\2\0\1\256\3\0\1\257\10\0\1\256"+
    "\26\0\1\260\42\0\1\261\40\0\1\262\25\0\2\263"+
    "\1\0\5\263\32\0\1\263\2\0\5\263\32\0\2\263"+
    "\1\0\3\263\1\0\1\263\33\0\1\263\1\0\1\263"+
    "\42\0\1\263\2\0\1\263\33\0\1\263\40\0\2\263"+
    "\1\0\1\263\1\0\3\263\32\0\2\263\1\0\2\263"+
    "\1\0\2\263\50\0\1\214\1\215\22\0\2\264\1\0"+
    "\5\264\2\0\1\264\3\0\1\257\10\0\1\264\12\0"+
    "\2\265\1\0\5\265\2\0\1\265\14\0\1\265\12\0"+
    "\2\130\1\0\5\130\2\0\1\130\1\0\1\266\12\0"+
    "\1\130\12\0\2\130\1\0\5\130\2\0\1\130\1\0"+
    "\1\267\12\0\1\130\12\0\2\130\1\0\5\130\2\0"+
    "\1\130\2\0\1\270\11\0\1\130\25\0\2\271\25\0"+
    "\2\272\1\0\5\272\2\0\1\272\14\0\1\272\12\0"+
    "\2\273\1\0\5\273\2\0\1\273\14\0\1\273\26\0"+
    "\1\274\42\0\1\275\40\0\1\276\25\0\1\277\41\0"+
    "\2\300\1\0\5\300\2\0\1\300\14\0\1\300\12\0"+
    "\2\301\1\0\5\301\2\0\1\301\3\0\1\302\10\0"+
    "\1\301\12\0\2\130\1\0\5\130\2\0\1\130\1\0"+
    "\1\303\12\0\1\130\12\0\2\130\1\0\5\130\2\0"+
    "\1\130\1\0\1\304\12\0\1\130\12\0\2\130\1\0"+
    "\5\130\2\0\1\130\2\0\1\305\11\0\1\130\13\0"+
    "\1\306\56\0\1\257\23\0\2\307\1\0\5\307\2\0"+
    "\1\307\3\0\1\302\10\0\1\307\12\0\2\310\1\0"+
    "\5\310\2\0\1\310\14\0\1\310\26\0\1\311\42\0"+
    "\1\312\40\0\1\313\25\0\1\314\41\0\2\315\1\0"+
    "\5\315\2\0\1\315\14\0\1\315\12\0\2\316\1\0"+
    "\5\316\2\0\1\316\14\0\1\316\12\0\2\130\1\0"+
    "\5\130\2\0\1\130\1\0\1\317\12\0\1\130\12\0"+
    "\2\130\1\0\5\130\2\0\1\130\1\0\1\320\12\0"+
    "\1\130\12\0\2\130\1\0\5\130\2\0\1\130\2\0"+
    "\1\321\11\0\1\130\12\0\1\322\5\0\1\323\33\0"+
    "\2\324\1\0\5\324\2\0\1\324\14\0\1\324\12\0"+
    "\2\325\1\0\5\325\2\0\1\325\4\0\1\215\7\0"+
    "\1\325\26\0\1\326\42\0\1\327\40\0\1\330\27\0"+
    "\1\331\41\0\1\332\55\0\1\302\23\0\2\333\1\0"+
    "\5\333\2\0\1\333\4\0\1\215\7\0\1\333\12\0"+
    "\2\130\1\0\5\130\2\0\1\130\1\0\1\334\12\0"+
    "\1\130\12\0\2\130\1\0\5\130\2\0\1\130\1\0"+
    "\1\335\12\0\1\130\12\0\2\130\1\0\5\130\2\0"+
    "\1\130\2\0\1\336\11\0\1\130\15\0\1\337\37\0"+
    "\1\340\40\0\2\341\1\0\5\341\2\0\1\341\14\0"+
    "\1\341\26\0\1\342\42\0\1\343\40\0\1\344\25\0"+
    "\1\345\2\0\1\346\36\0\1\347\2\0\1\350\2\0"+
    "\1\351\33\0\2\352\1\0\5\352\2\0\1\352\14\0"+
    "\1\352\12\0\2\130\1\0\5\130\2\0\1\130\1\0"+
    "\1\353\12\0\1\130\12\0\2\130\1\0\5\130\2\0"+
    "\1\130\1\0\1\354\12\0\1\130\12\0\2\130\1\0"+
    "\5\130\2\0\1\130\2\0\1\355\11\0\1\130\14\0"+
    "\1\356\41\0\1\357\41\0\1\360\41\0\1\361\41\0"+
    "\1\362\56\0\1\215\36\0\1\363\42\0\1\364\40\0"+
    "\1\365\25\0\1\366\1\367\1\0\1\370\2\0\1\371"+
    "\33\0\1\366\2\0\1\372\2\0\1\373\33\0\1\374"+
    "\1\367\1\0\1\375\36\0\2\366\1\0\1\366\2\0"+
    "\1\371\33\0\1\366\1\367\1\0\1\366\2\0\1\373"+
    "\33\0\2\130\1\0\5\130\2\0\1\130\1\0\1\376"+
    "\12\0\1\130\12\0\2\130\1\0\5\130\2\0\1\130"+
    "\1\0\1\377\12\0\1\130\12\0\2\130\1\0\5\130"+
    "\2\0\1\130\2\0\1\u0100\11\0\1\130\12\0\2\u0101"+
    "\1\0\5\u0101\32\0\1\u0101\2\0\5\u0101\32\0\2\u0101"+
    "\1\0\3\u0101\1\0\1\u0101\33\0\1\u0101\1\0\1\u0101"+
    "\42\0\1\u0101\2\0\1\u0101\33\0\1\u0101\40\0\2\u0101"+
    "\1\0\1\u0101\1\0\3\u0101\32\0\2\u0101\1\0\2\u0101"+
    "\1\0\2\u0101\46\0\1\u0102\42\0\1\u0103\40\0\1\u0104"+
    "\44\0\1\u0105\1\u0106\21\0\2\130\1\0\5\130\2\0"+
    "\1\130\1\0\1\u0107\12\0\1\130\12\0\2\130\1\0"+
    "\5\130\2\0\1\130\1\0\1\u0108\12\0\1\130\12\0"+
    "\2\130\1\0\5\130\2\0\1\130\2\0\1\u0107\11\0"+
    "\1\130\15\0\1\u0109\52\0\1\u010a\42\0\1\u010a\25\0"+
    "\1\u010b\1\0\1\u010c\36\0\2\130\1\0\5\130\2\0"+
    "\1\130\14\0\1\130\13\0\1\u010c\1\0\1\u010d\37\0"+
    "\1\u010e\1\0\1\u010e\37\0\1\u010e\1\0\1\u010f\37\0"+
    "\1\u0110\1\0\1\u0110\37\0\1\u0110\1\0\1\u0110\13\0"+
    "\1\u0105\41\0\1\u0105\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8704];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\4\1\1\11\3\1\1\11"+
    "\1\1\4\11\3\1\3\0\1\11\6\0\1\11\1\1"+
    "\7\0\2\1\1\11\1\1\32\0\1\11\105\0\1\11"+
    "\167\0\1\11\13\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol sym(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol sym(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("SCANNER ERROR: " + yytext());
            } 
            // fall through
          case 17: break;
          case 2: 
            { ;
            } 
            // fall through
          case 18: break;
          case 3: 
            { return sym(sym.UINT, new Integer(yytext()));
            } 
            // fall through
          case 19: break;
          case 4: 
            { return sym(sym.DOT);
            } 
            // fall through
          case 20: break;
          case 5: 
            { return sym(sym.S);
            } 
            // fall through
          case 21: break;
          case 6: 
            { return sym(sym.COL);
            } 
            // fall through
          case 22: break;
          case 7: 
            { return sym(sym.SO);
            } 
            // fall through
          case 23: break;
          case 8: 
            { return sym(sym.SC);
            } 
            // fall through
          case 24: break;
          case 9: 
            { return sym(sym.CM);
            } 
            // fall through
          case 25: break;
          case 10: 
            { return sym(sym.QSTRING, new String(yytext()));
            } 
            // fall through
          case 26: break;
          case 11: 
            { return sym(sym.KG, new String(yytext()));
            } 
            // fall through
          case 27: break;
          case 12: 
            { return sym(sym.REAL, new Float(yytext()));
            } 
            // fall through
          case 28: break;
          case 13: 
            { return sym(sym.SEP);
            } 
            // fall through
          case 29: break;
          case 14: 
            { return sym(sym.EURO, new String(yytext()));
            } 
            // fall through
          case 30: break;
          case 15: 
            { return sym(sym.TOK1);
            } 
            // fall through
          case 31: break;
          case 16: 
            { return sym(sym.TOK2);
            } 
            // fall through
          case 32: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
