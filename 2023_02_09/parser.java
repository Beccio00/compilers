
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\004\000\002\002\007\000\002\003" +
    "\005\000\002\006\004\000\002\006\004\000\002\004\002" +
    "\000\002\004\005\000\002\007\010\000\002\011\010\000" +
    "\002\011\006\000\002\005\002\000\002\015\002\000\002" +
    "\005\011\000\002\010\002\000\002\010\003\000\002\014" +
    "\012\000\002\014\010\000\002\012\002\000\002\013\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\004\006\004\001\002\000\004\005\061\001" +
    "\002\000\004\002\060\001\002\000\004\004\007\001\002" +
    "\000\006\004\ufffc\020\ufffc\001\002\000\006\004\011\020" +
    "\013\001\002\000\006\002\ufff7\017\ufff7\001\002\000\004" +
    "\020\013\001\002\000\004\010\014\001\002\000\004\011" +
    "\015\001\002\000\004\020\016\001\002\000\004\010\027" +
    "\001\002\000\006\012\021\013\020\001\002\000\004\020" +
    "\023\001\002\000\004\007\022\001\002\000\006\004\ufffa" +
    "\020\ufffa\001\002\000\004\010\024\001\002\000\004\021" +
    "\025\001\002\000\004\014\026\001\002\000\006\012\ufff9" +
    "\013\ufff9\001\002\000\004\021\030\001\002\000\004\014" +
    "\031\001\002\000\006\012\ufff8\013\ufff8\001\002\000\006" +
    "\004\ufffb\020\ufffb\001\002\000\006\002\000\017\034\001" +
    "\002\000\004\020\035\001\002\000\006\010\ufff6\020\ufff6" +
    "\001\002\000\006\010\037\020\ufff4\001\002\000\004\020" +
    "\ufff3\001\002\000\004\020\ufff0\001\002\000\006\007\051" +
    "\013\uffef\001\002\000\004\020\043\001\002\000\004\016" +
    "\044\001\002\000\004\020\045\001\002\000\004\021\046" +
    "\001\002\000\004\015\047\001\002\000\006\007\ufff1\013" +
    "\ufff1\001\002\000\004\013\052\001\002\000\006\002\ufff5" +
    "\017\ufff5\001\002\000\004\020\053\001\002\000\004\016" +
    "\054\001\002\000\004\020\055\001\002\000\004\021\056" +
    "\001\002\000\004\015\057\001\002\000\006\007\ufff2\013" +
    "\ufff2\001\002\000\004\002\001\001\002\000\004\006\062" +
    "\001\002\000\004\004\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\007" +
    "\001\001\000\004\007\011\001\001\000\004\005\032\001" +
    "\001\000\004\007\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\035\001\001\000\004\010\037" +
    "\001\001\000\002\001\001\000\006\012\041\014\040\001" +
    "\001\000\004\013\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	table = new HashMap<String, HashMap<String, Float>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


	public HashMap<String, HashMap<String, Float>> table;
	
    public void syntax_error(Symbol current_symbol) {
        StringBuffer m = new StringBuffer("Error");

        if(current_symbol.left != -1) {
            m.append(" in line " + (current_symbol.left + 1));
            m.append(" in column " + (current_symbol.right + 1));
        }
        m.append(", symbol: " + current_symbol);
        m.append(": Syntax Error");

        System.err.println(m);
    }
	
	public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if(info instanceof Symbol) {
            if(((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if(((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }

    public Object stack(int position) {
        return (((Symbol) stack.elementAt(tos + position)).value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP food SEP recipes 
            { parser.Tree.reduce(5,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= TOK2 TOK1 TOK2 
            { parser.Tree.reduce(3,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tok2_list ::= TOK2 TOK2 
            { parser.Tree.reduce(2,"tok2_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tok2_list ::= tok2_list TOK2 
            { parser.Tree.reduce(2,"tok2_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // food ::= 
            { parser.Tree.reduce(0,"food",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("food",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // food ::= food food_category food_category 
            { parser.Tree.reduce(3,"food",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("food",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // food_category ::= QSTRING COL SO food_list SC S 
            { parser.Tree.reduce(6,"food_category",0);
              Object RESULT =null;
		int food_category_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int food_category_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String food_category_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object[] res = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        parser.table.put(food_category_name, (HashMap)res[0]);
        System.out.println("Less expensive: " + res[2] + " " + res[1] + "EURO/kg");
        System.out.println("More expensive: " + res[4] + " " + res[3] + "EURO/kg");

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("food_category",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // food_list ::= food_list CM QSTRING COL REAL EURO 
            { parser.Tree.reduce(6,"food_list",0);
              Object[] RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object[] res = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int food_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int food_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String food_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int priceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int priceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float price = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    HashMap<String,Float> tab = new HashMap<String,Float>(); 
                    tab.put(food_name, price);
                    if((Float)price > (Float)res[1]) {
                        res[1] = price;
                        res[2] = food_name;
                    }
                    else if((Float)price < (Float)res[3]) {
                        res[3] = price;
                        res[4] = food_name;
                    }

                    res[0] = tab;

                    RESULT = res;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("food_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // food_list ::= QSTRING COL REAL EURO 
            { parser.Tree.reduce(4,"food_list",0);
              Object[] RESULT =null;
		int food_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int food_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String food_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int priceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int priceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float price = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Object[] res = new Object[5];
                HashMap<String,Float> tab = new HashMap<String,Float>();
                tab.put(food_name, price);
                res[0] = (HashMap)tab;
                res[1] = price;
                res[2] = food_name;
                res[3] = price;
                res[4] = food_name;
                RESULT = res;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("food_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // recipes ::= 
            { parser.Tree.reduce(0,"recipes",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("recipes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            { parser.Tree.reduce(0,"NT$0",0);
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int recipe_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int recipe_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String recipe_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                System.out.println(recipe_name);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // recipes ::= recipes UINT QSTRING NT$0 optional_col ingredient_list S 
            { parser.Tree.reduce(7,"recipes",0);
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int numberleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int recipe_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int recipe_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String recipe_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float res = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.out.println("TOT: " + res + " EURO");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recipes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // optional_col ::= 
            { parser.Tree.reduce(0,"optional_col",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_col",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // optional_col ::= COL 
            { parser.Tree.reduce(1,"optional_col",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_col",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ingredient_list ::= ingredient_list NT1 CM QSTRING DOT QSTRING REAL KG 
            { parser.Tree.reduce(8,"ingredient_list",0);
              Float RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Float sum = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int numberleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Float number = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int food_category_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int food_category_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String food_category_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int food_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int food_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String food_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int weightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int weightright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float weight = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                HashMap<String, Float> tab = (HashMap)parser.table.get(food_category_name);
                Float kgprice = (Float)tab.get(food_name); 
                Float res = kgprice + weight * number;
                sum += res; 
                System.out.println(food_category_name + " " + res + " EURO"); 
                RESULT = sum;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingredient_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ingredient_list ::= NT0 QSTRING DOT QSTRING REAL KG 
            { parser.Tree.reduce(6,"ingredient_list",0);
              Float RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Float number = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int food_category_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int food_category_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String food_category_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int food_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int food_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String food_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int weightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int weightright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float weight = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                HashMap<String, Float> tab = (HashMap)parser.table.get(food_category_name);
                Float kgprice = (Float)tab.get(food_name);
                Float res = kgprice + weight * number; 
                System.out.println(food_category_name + " " + res + " EURO"); 
                RESULT = res;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingredient_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT0 ::= 
            { parser.Tree.reduce(0,"NT0",0);
              Float RESULT =null;
		
    RESULT = (Float)parser.stack(-2);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT0",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT1 ::= 
            { parser.Tree.reduce(0,"NT1",0);
              Float RESULT =null;
		
    RESULT = (Float)parser.stack(-3);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
