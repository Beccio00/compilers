
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\003\007\000\002\003\013\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\005\003\000\002\005\002\000\002\007\005\000\002" +
    "\007\004\000\002\006\003\000\002\006\003\000\002\010" +
    "\005\000\002\011\005\000\002\012\013\000\002\012\014" +
    "\000\002\013\003\000\002\013\003\000\002\013\005\000" +
    "\002\013\005\000\002\013\004\000\002\013\005\000\002" +
    "\013\003\000\002\013\003\000\002\014\006\000\002\015" +
    "\003\000\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\006\005\005\007\004\001\002\000\012\004" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\001\002\000\012\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\001\002\000\010\005\101\006" +
    "\100\007\077\001\002\000\004\002\076\001\002\000\004" +
    "\004\011\001\002\000\010\002\ufff7\011\012\020\014\001" +
    "\002\000\004\031\074\001\002\000\004\002\000\001\002" +
    "\000\016\011\024\014\033\023\026\026\027\027\030\030" +
    "\032\001\002\000\010\002\ufff8\011\012\020\014\001\002" +
    "\000\010\002\ufff3\011\ufff3\020\ufff3\001\002\000\006\011" +
    "\012\020\014\001\002\000\010\002\ufff4\011\ufff4\020\ufff4" +
    "\001\002\000\010\002\ufff5\011\ufff5\020\ufff5\001\002\000" +
    "\006\011\012\020\014\001\002\000\010\002\ufff6\011\ufff6" +
    "\020\ufff6\001\002\000\024\002\uffe8\011\uffe8\013\uffe8\015" +
    "\uffe8\016\uffe8\020\uffe8\021\uffe8\024\uffe8\025\uffe8\001\002" +
    "\000\024\002\uffe7\011\uffe7\013\uffe7\015\uffe7\016\uffe7\020" +
    "\uffe7\021\uffe7\024\uffe7\025\uffe7\001\002\000\004\014\066" +
    "\001\002\000\016\011\024\014\033\023\026\026\027\027" +
    "\030\030\032\001\002\000\024\002\uffee\011\uffee\013\uffee" +
    "\015\uffee\016\uffee\020\uffee\021\uffee\024\uffee\025\uffee\001" +
    "\002\000\010\021\043\024\035\025\037\001\002\000\024" +
    "\002\uffed\011\uffed\013\uffed\015\uffed\016\uffed\020\uffed\021" +
    "\uffed\024\uffed\025\uffed\001\002\000\016\011\024\014\033" +
    "\023\026\026\027\027\030\030\032\001\002\000\010\015" +
    "\036\024\035\025\037\001\002\000\016\011\024\014\033" +
    "\023\026\026\027\027\030\030\032\001\002\000\024\002" +
    "\uffe9\011\uffe9\013\uffe9\015\uffe9\016\uffe9\020\uffe9\021\uffe9" +
    "\024\uffe9\025\uffe9\001\002\000\016\011\024\014\033\023" +
    "\026\026\027\027\030\030\032\001\002\000\024\002\uffeb" +
    "\011\uffeb\013\uffeb\015\uffeb\016\uffeb\020\uffeb\021\uffeb\024" +
    "\035\025\uffeb\001\002\000\024\002\uffec\011\uffec\013\uffec" +
    "\015\uffec\016\uffec\020\uffec\021\uffec\024\uffec\025\uffec\001" +
    "\002\000\012\002\ufff1\011\ufff1\020\ufff1\021\054\001\002" +
    "\000\016\011\024\014\033\023\026\026\027\027\030\030" +
    "\032\001\002\000\010\016\045\024\035\025\037\001\002" +
    "\000\004\022\046\001\002\000\004\014\047\001\002\000" +
    "\004\010\050\001\002\000\004\015\051\001\002\000\004" +
    "\012\052\001\002\000\004\017\053\001\002\000\012\002" +
    "\ufff0\011\ufff0\020\ufff0\021\ufff0\001\002\000\016\011\024" +
    "\014\033\023\026\026\027\027\030\030\032\001\002\000" +
    "\010\016\056\024\035\025\037\001\002\000\004\022\057" +
    "\001\002\000\004\014\060\001\002\000\004\010\061\001" +
    "\002\000\004\015\062\001\002\000\004\012\063\001\002" +
    "\000\004\017\064\001\002\000\012\002\uffef\011\uffef\020" +
    "\uffef\021\uffef\001\002\000\024\002\uffea\011\uffea\013\uffea" +
    "\015\uffea\016\uffea\020\uffea\021\uffea\024\uffea\025\uffea\001" +
    "\002\000\016\011\024\014\033\023\026\026\027\027\030" +
    "\030\032\001\002\000\006\013\071\015\072\001\002\000" +
    "\012\013\uffe5\015\uffe5\024\035\025\037\001\002\000\016" +
    "\011\024\014\033\023\026\026\027\027\030\030\032\001" +
    "\002\000\024\002\uffe6\011\uffe6\013\uffe6\015\uffe6\016\uffe6" +
    "\020\uffe6\021\uffe6\024\uffe6\025\uffe6\001\002\000\012\013" +
    "\uffe4\015\uffe4\024\035\025\037\001\002\000\016\011\024" +
    "\014\033\023\026\026\027\027\030\030\032\001\002\000" +
    "\014\002\ufff2\011\ufff2\020\ufff2\024\035\025\037\001\002" +
    "\000\004\002\001\001\002\000\012\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\001\002\000\006\005\005\007\004\001\002" +
    "\000\012\004\ufffc\005\ufffc\006\ufffc\007\ufffc\001\002\000" +
    "\012\004\uffff\005\101\006\103\007\077\001\002\000\006" +
    "\005\005\007\004\001\002\000\012\004\ufffe\005\101\006" +
    "\105\007\077\001\002\000\006\005\005\007\004\001\002" +
    "\000\010\005\101\006\107\007\077\001\002\000\006\005" +
    "\005\007\004\001\002\000\010\004\ufffd\005\101\007\077" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\010\002\006\003\007\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\012\006\016\007" +
    "\014\010\017\011\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\030\014\024\001\001\000\010\006" +
    "\021\010\017\011\015\001\001\000\002\001\001\000\010" +
    "\006\020\010\017\011\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\022\010\017\011\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\064\014\024\001\001\000\002" +
    "\001\001\000\004\012\041\001\001\000\002\001\001\000" +
    "\006\013\033\014\024\001\001\000\002\001\001\000\006" +
    "\013\040\014\024\001\001\000\002\001\001\000\006\013" +
    "\037\014\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\043\014\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\054\014\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\067\014\024\015\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\072\014\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\074\014\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\103\001\001\000\002\001\001\000\004\004" +
    "\105\001\001\000\002\001\001\000\004\004\107\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	table = new HashMap<String, Boolean>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


	public HashMap<String, Boolean> table;
    public void syntax_error(Symbol current_symbol) {
        StringBuffer m = new StringBuffer("Error");

        if(current_symbol.left != -1) {
            m.append(" in line " + (current_symbol.left + 1));
            m.append(" in column " + (current_symbol.right + 1));
        }
        m.append(", symbol: " + current_symbol);
        m.append(": Syntax Error");

        System.err.println(m);
    }
	
	public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if(info instanceof Symbol) {
            if(((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if(((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }

    public Object stack(int position) {
        return (((Symbol) stack.elementAt(tos + position)).value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP commands 
            { parser.Tree.reduce(3,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= tok13l TOK2 tok13l 
            { parser.Tree.reduce(3,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= tok13l TOK2 tok13l TOK2 tok13l 
            { parser.Tree.reduce(5,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= tok13l TOK2 tok13l TOK2 tok13l TOK2 tok13l TOK2 tok13l 
            { parser.Tree.reduce(9,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tok13l ::= tok13l TOK1 
            { parser.Tree.reduce(2,"tok13l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok13l",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tok13l ::= tok13l TOK3 
            { parser.Tree.reduce(2,"tok13l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok13l",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tok13l ::= TOK1 
            { parser.Tree.reduce(1,"tok13l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok13l",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tok13l ::= TOK3 
            { parser.Tree.reduce(1,"tok13l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok13l",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // commands ::= command_list 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("commands",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // commands ::= 
            { parser.Tree.reduce(0,"commands",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("commands",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // command_list ::= command_list command command 
            { parser.Tree.reduce(3,"command_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // command_list ::= command command 
            { parser.Tree.reduce(2,"command_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // command ::= assignment 
            { parser.Tree.reduce(1,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // command ::= cmp 
            { parser.Tree.reduce(1,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // assignment ::= VAR EQ bool_expr 
            { parser.Tree.reduce(3,"assignment",0);
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean res = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        parser.table.put(var, res);  
        System.out.println(var + " " + res);  
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cmp ::= CMP bool_expr action_list 
            { parser.Tree.reduce(3,"cmp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // action_list ::= WITH bool_expr SO PRINT RO QUOTEDS RC PV SC 
            { parser.Tree.reduce(9,"action_list",0);
              Object RESULT =null;
		int b_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int b_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Boolean b_a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    Boolean b_expr = (Boolean)parser.stack(-8);
                    if (b_expr == b_a) {
                        System.out.println(string);
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // action_list ::= action_list WITH bool_expr SO PRINT RO QUOTEDS RC PV SC 
            { parser.Tree.reduce(10,"action_list",0);
              Object RESULT =null;
		int b_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int b_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Boolean b_a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    Boolean b_expr = (Boolean)parser.stack(-9);
                    if (b_expr == b_a) {
                        System.out.println(string);
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bool_expr ::= TRUE 
            { parser.Tree.reduce(1,"bool_expr",0);
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bool_expr ::= FALSE 
            { parser.Tree.reduce(1,"bool_expr",0);
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bool_expr ::= bool_expr AND bool_expr 
            { parser.Tree.reduce(3,"bool_expr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean y = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x && y; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bool_expr ::= bool_expr OR bool_expr 
            { parser.Tree.reduce(3,"bool_expr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean y = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x || y; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bool_expr ::= NOT bool_expr 
            { parser.Tree.reduce(2,"bool_expr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = !x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bool_expr ::= RO bool_expr RC 
            { parser.Tree.reduce(3,"bool_expr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bool_expr ::= VAR 
            { parser.Tree.reduce(1,"bool_expr",0);
              Boolean RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (Boolean)parser.table.get(var); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bool_expr ::= fz_and 
            { parser.Tree.reduce(1,"bool_expr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // fz_and ::= FZ_AND RO bool_list RC 
            { parser.Tree.reduce(4,"fz_and",0);
              Boolean RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
            Boolean result = true;
            for(Boolean e : list) {
                result = result && e;
            }

            RESULT = result;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fz_and",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bool_list ::= bool_expr 
            { parser.Tree.reduce(1,"bool_list",0);
              ArrayList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ArrayList<Boolean>();
                RESULT.add(e);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bool_list ::= bool_list COMMA bool_expr 
            { parser.Tree.reduce(3,"bool_list",0);
              ArrayList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                l.add(e);
                RESULT = l;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
