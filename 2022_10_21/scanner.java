/* The following code was generated by JFlex 1.7.0 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>./scanner.jflex</tt>
 */
class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\10\1\12\1\12\1\11\22\0\1\23\1\36\1\22"+
    "\1\0\1\5\3\0\1\42\1\43\1\0\1\7\1\41\1\24\1\4"+
    "\1\36\1\26\1\25\1\30\1\31\4\27\2\21\1\0\1\15\1\0"+
    "\1\44\1\0\1\35\1\2\1\65\1\16\1\53\1\66\1\16\1\62"+
    "\1\3\1\61\1\57\3\3\1\54\1\63\1\64\1\55\1\3\1\67"+
    "\1\3\1\60\2\3\1\56\3\3\1\45\1\0\1\46\1\0\1\1"+
    "\1\0\1\20\2\17\1\71\1\17\1\70\2\17\1\51\1\17\1\40"+
    "\2\17\1\52\1\17\1\47\1\17\1\50\1\17\1\37\3\17\1\32"+
    "\1\33\1\34\1\6\1\0\1\13\7\0\1\12\u1fa2\0\1\12\1\12"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\4\1\2\2\1\3\1\4\2\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\4\2\1\1\13"+
    "\1\14\3\1\1\4\5\0\1\15\1\0\2\4\3\0"+
    "\1\16\1\0\1\4\1\0\1\17\2\0\2\4\1\20"+
    "\1\0\1\21\1\22\5\0\1\23\1\4\1\24\4\0"+
    "\1\25\2\0\1\2\1\0\1\26\15\0\1\27\13\0"+
    "\1\30\127\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\72\0\u0122\0\72"+
    "\0\u015c\0\u0196\0\u01d0\0\u020a\0\72\0\72\0\72\0\72"+
    "\0\72\0\72\0\u0244\0\u027e\0\u02b8\0\164\0\164\0\u02f2"+
    "\0\u032c\0\u0366\0\u03a0\0\164\0\u03da\0\u0414\0\u044e\0\u0196"+
    "\0\72\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\164"+
    "\0\u05e4\0\u061e\0\u0658\0\72\0\u0692\0\u06cc\0\u0706\0\u0740"+
    "\0\164\0\u077a\0\164\0\164\0\u07b4\0\u07ee\0\u0828\0\u0862"+
    "\0\u089c\0\72\0\u08d6\0\164\0\u0910\0\u094a\0\u0984\0\u09be"+
    "\0\u015c\0\u09f8\0\u0a32\0\u0692\0\u0a6c\0\164\0\u0aa6\0\u0ae0"+
    "\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0"+
    "\0\u0cea\0\u0d24\0\u0d5e\0\72\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46"+
    "\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\72"+
    "\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac"+
    "\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c"+
    "\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c"+
    "\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c"+
    "\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec"+
    "\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc"+
    "\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c"+
    "\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c"+
    "\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c"+
    "\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc"+
    "\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\2\3\1\4\1\5\1\2\1\6"+
    "\1\7\1\0\1\2\1\6\1\10\1\3\2\11\1\3"+
    "\1\12\1\6\1\2\5\3\3\11\1\13\1\2\1\14"+
    "\1\11\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\3\11\1\24\2\3\1\25\1\3\1\26\1\3\1\27"+
    "\1\30\1\31\1\32\2\3\1\33\1\11\73\0\1\34"+
    "\1\35\2\34\11\0\4\34\3\0\10\34\2\0\2\34"+
    "\6\0\23\34\5\0\1\36\73\0\1\37\72\0\1\6"+
    "\62\0\1\34\1\35\1\11\1\34\11\0\4\11\3\0"+
    "\10\11\2\0\2\11\6\0\23\11\3\0\1\40\12\0"+
    "\3\40\1\0\1\41\1\40\6\0\3\40\2\0\2\40"+
    "\6\0\23\40\16\0\1\42\1\0\1\42\32\0\1\42"+
    "\6\0\1\42\2\0\2\42\4\0\1\34\1\35\1\11"+
    "\1\34\11\0\4\11\3\0\10\11\2\0\1\11\1\43"+
    "\6\0\23\11\1\0\1\34\1\35\1\11\1\34\11\0"+
    "\4\11\3\0\10\11\2\0\2\11\6\0\1\11\1\44"+
    "\21\11\1\0\1\34\1\35\2\34\11\0\4\34\3\0"+
    "\10\34\2\0\2\34\6\0\5\34\1\45\15\34\1\0"+
    "\1\34\1\35\2\34\11\0\4\34\3\0\10\34\2\0"+
    "\2\34\6\0\10\34\1\46\12\34\1\0\1\34\1\35"+
    "\2\34\11\0\4\34\3\0\10\34\2\0\2\34\6\0"+
    "\15\34\1\47\5\34\1\0\1\34\1\35\2\34\11\0"+
    "\4\34\3\0\10\34\2\0\2\34\6\0\20\34\1\50"+
    "\2\34\1\0\1\34\1\35\2\34\11\0\4\34\3\0"+
    "\10\34\2\0\2\34\6\0\14\34\1\51\6\34\1\0"+
    "\1\34\1\35\1\11\1\34\11\0\4\11\3\0\7\11"+
    "\1\52\2\0\2\11\6\0\23\11\3\0\1\53\12\0"+
    "\3\53\11\0\3\53\2\0\2\53\6\0\23\53\5\0"+
    "\1\54\73\0\1\55\100\0\1\56\1\0\1\56\32\0"+
    "\1\56\6\0\1\56\2\0\2\56\4\0\1\34\1\35"+
    "\1\11\1\34\11\0\4\11\3\0\4\11\1\57\3\11"+
    "\2\0\2\11\6\0\23\11\1\0\1\34\1\35\1\11"+
    "\1\34\11\0\4\11\3\0\10\11\2\0\2\11\6\0"+
    "\2\11\1\60\20\11\1\0\1\34\1\35\2\34\11\0"+
    "\4\34\3\0\10\34\2\0\2\34\6\0\6\34\1\61"+
    "\14\34\1\0\1\34\1\35\2\34\11\0\4\34\3\0"+
    "\10\34\2\0\2\34\6\0\11\34\1\62\11\34\1\0"+
    "\1\34\1\35\2\34\11\0\4\34\3\0\10\34\2\0"+
    "\2\34\6\0\11\34\1\63\11\34\1\0\1\34\1\35"+
    "\2\34\11\0\4\34\3\0\10\34\2\0\2\34\6\0"+
    "\17\34\1\64\3\34\1\0\1\65\1\35\1\11\1\34"+
    "\11\0\4\11\3\0\10\11\2\0\2\11\6\0\23\11"+
    "\3\0\1\53\1\66\11\0\3\53\11\0\3\53\2\0"+
    "\2\53\6\0\23\53\7\55\1\67\3\0\57\55\16\0"+
    "\1\70\1\0\1\70\32\0\1\70\6\0\1\70\2\0"+
    "\2\70\4\0\1\34\1\35\1\11\1\34\7\0\1\71"+
    "\1\72\4\11\1\0\1\71\1\0\10\11\2\0\2\11"+
    "\6\0\23\11\1\0\1\34\1\35\1\11\1\34\11\0"+
    "\4\11\3\0\10\11\2\0\2\11\6\0\3\11\1\73"+
    "\17\11\1\0\1\34\1\35\2\34\11\0\4\34\3\0"+
    "\10\34\2\0\2\34\6\0\12\34\1\74\10\34\1\0"+
    "\1\34\1\35\2\34\11\0\2\34\1\75\1\34\3\0"+
    "\10\34\2\0\2\34\6\0\23\34\3\0\1\76\12\0"+
    "\3\76\11\0\3\76\2\0\2\76\6\0\23\76\7\55"+
    "\1\77\3\0\57\55\16\0\1\100\1\0\1\100\32\0"+
    "\1\100\6\0\1\100\2\0\2\100\17\0\1\71\1\72"+
    "\5\0\1\71\47\0\1\34\1\35\1\11\1\34\11\0"+
    "\4\11\3\0\10\11\2\0\1\101\1\11\6\0\23\11"+
    "\1\0\1\34\1\35\2\34\11\0\4\34\3\0\10\34"+
    "\2\0\2\34\6\0\3\34\1\102\17\34\3\0\1\76"+
    "\12\0\3\76\11\0\3\76\1\0\1\103\2\76\6\0"+
    "\23\76\7\55\1\77\3\0\1\104\56\55\16\0\1\105"+
    "\1\0\1\105\32\0\1\105\6\0\1\105\2\0\2\105"+
    "\4\0\1\34\1\35\2\34\11\0\4\34\3\0\10\34"+
    "\2\0\2\34\6\0\22\34\1\106\1\0\1\107\1\0"+
    "\2\107\11\0\4\107\3\0\10\107\2\0\2\107\6\0"+
    "\23\107\16\0\1\110\1\0\1\110\32\0\1\110\6\0"+
    "\1\110\2\0\2\110\4\0\1\107\1\111\2\107\11\0"+
    "\4\107\3\0\10\107\2\0\2\107\6\0\23\107\16\0"+
    "\1\112\1\0\1\112\3\0\1\113\1\114\1\115\1\116"+
    "\1\114\1\117\21\0\1\112\6\0\1\112\2\0\2\112"+
    "\6\0\1\120\12\0\3\120\11\0\3\120\2\0\2\120"+
    "\6\0\23\120\16\0\1\121\1\0\1\121\32\0\1\121"+
    "\6\0\1\121\2\0\2\121\30\0\1\122\1\115\3\116"+
    "\54\0\1\123\1\124\5\0\1\123\1\0\5\116\1\125"+
    "\1\126\1\127\51\0\1\123\1\124\5\0\1\123\6\0"+
    "\1\125\1\126\1\127\51\0\1\123\1\124\5\0\1\123"+
    "\1\0\5\115\1\125\1\126\1\127\51\0\1\123\1\124"+
    "\5\0\1\123\1\0\2\116\1\115\1\130\1\115\1\125"+
    "\1\126\1\127\40\0\1\120\1\131\11\0\3\120\11\0"+
    "\3\120\2\0\2\120\6\0\23\120\24\0\1\113\1\114"+
    "\1\115\1\116\1\114\1\117\54\0\1\123\1\124\5\0"+
    "\1\123\1\0\2\116\1\115\1\116\1\115\1\125\1\126"+
    "\1\127\51\0\1\123\1\124\5\0\1\123\100\0\1\132"+
    "\72\0\1\132\72\0\1\132\51\0\1\123\1\124\5\0"+
    "\1\123\1\0\2\115\1\0\2\115\1\125\1\126\1\127"+
    "\40\0\1\133\12\0\3\133\11\0\3\133\2\0\2\133"+
    "\6\0\23\133\32\0\1\134\1\135\1\136\40\0\1\133"+
    "\10\0\1\137\1\140\3\133\2\0\1\137\6\0\3\133"+
    "\1\0\1\141\2\133\6\0\23\133\32\0\1\142\72\0"+
    "\1\142\72\0\1\142\51\0\1\137\1\140\5\0\1\137"+
    "\47\0\1\143\1\0\2\143\11\0\4\143\3\0\10\143"+
    "\2\0\2\143\6\0\23\143\32\0\1\144\1\145\1\146"+
    "\36\0\1\143\1\147\2\143\11\0\4\143\3\0\10\143"+
    "\2\0\2\143\6\0\23\143\32\0\1\150\72\0\1\150"+
    "\72\0\1\150\40\0\1\151\12\0\3\151\11\0\3\151"+
    "\2\0\2\151\6\0\23\151\32\0\1\152\1\153\1\154"+
    "\40\0\1\151\1\155\11\0\3\151\11\0\3\151\2\0"+
    "\2\151\6\0\23\151\32\0\1\156\72\0\1\156\72\0"+
    "\1\156\40\0\1\157\12\0\3\157\11\0\3\157\2\0"+
    "\2\157\6\0\23\157\14\0\1\123\1\124\5\0\1\123"+
    "\6\0\1\152\1\153\1\154\40\0\1\157\12\0\3\157"+
    "\11\0\3\157\1\0\1\160\2\157\6\0\23\157\1\0"+
    "\1\161\1\0\2\161\11\0\4\161\3\0\10\161\2\0"+
    "\2\161\6\0\23\161\1\0\1\161\1\162\2\161\11\0"+
    "\4\161\3\0\10\161\2\0\2\161\6\0\23\161\3\0"+
    "\1\163\12\0\3\163\11\0\3\163\2\0\2\163\6\0"+
    "\23\163\3\0\1\163\1\164\11\0\3\163\11\0\3\163"+
    "\2\0\2\163\6\0\23\163\3\0\1\165\12\0\3\165"+
    "\11\0\3\165\2\0\2\165\6\0\23\165\3\0\1\165"+
    "\12\0\3\165\11\0\3\165\1\0\1\166\2\165\6\0"+
    "\23\165\1\0\1\167\1\0\2\167\11\0\4\167\3\0"+
    "\10\167\2\0\2\167\6\0\23\167\1\0\1\167\1\170"+
    "\2\167\11\0\4\167\3\0\10\167\2\0\2\167\6\0"+
    "\23\167\3\0\1\171\12\0\3\171\11\0\3\171\2\0"+
    "\2\171\6\0\23\171\3\0\1\171\1\172\11\0\3\171"+
    "\11\0\3\171\2\0\2\171\6\0\23\171\3\0\1\173"+
    "\12\0\3\173\11\0\3\173\2\0\2\173\6\0\23\173"+
    "\3\0\1\173\12\0\3\173\11\0\3\173\1\0\1\174"+
    "\2\173\6\0\23\173\1\0\1\175\1\0\2\175\11\0"+
    "\4\175\3\0\10\175\2\0\2\175\6\0\23\175\1\0"+
    "\1\175\1\176\2\175\11\0\4\175\3\0\10\175\2\0"+
    "\2\175\6\0\23\175\3\0\1\177\12\0\3\177\11\0"+
    "\3\177\2\0\2\177\6\0\23\177\3\0\1\177\1\200"+
    "\11\0\3\177\11\0\3\177\2\0\2\177\6\0\23\177"+
    "\3\0\1\201\12\0\3\201\11\0\3\201\2\0\2\201"+
    "\6\0\23\201\3\0\1\201\12\0\3\201\11\0\3\201"+
    "\1\0\1\202\2\201\6\0\23\201\1\0\1\203\1\0"+
    "\2\203\11\0\4\203\3\0\10\203\2\0\2\203\6\0"+
    "\23\203\1\0\1\203\1\204\2\203\11\0\4\203\3\0"+
    "\10\203\2\0\2\203\6\0\23\203\3\0\1\205\12\0"+
    "\3\205\11\0\3\205\2\0\2\205\6\0\23\205\3\0"+
    "\1\205\1\206\11\0\3\205\11\0\3\205\2\0\2\205"+
    "\6\0\23\205\3\0\1\207\12\0\3\207\11\0\3\207"+
    "\2\0\2\207\6\0\23\207\3\0\1\207\12\0\3\207"+
    "\11\0\3\207\1\0\1\210\2\207\6\0\23\207\1\0"+
    "\1\211\1\0\2\211\11\0\4\211\3\0\10\211\2\0"+
    "\2\211\6\0\23\211\1\0\1\211\1\212\2\211\11\0"+
    "\4\211\3\0\10\211\2\0\2\211\6\0\23\211\3\0"+
    "\1\213\12\0\3\213\11\0\3\213\2\0\2\213\6\0"+
    "\23\213\3\0\1\213\1\214\11\0\3\213\11\0\3\213"+
    "\2\0\2\213\6\0\23\213\3\0\1\215\12\0\3\215"+
    "\11\0\3\215\2\0\2\215\6\0\23\215\3\0\1\215"+
    "\12\0\3\215\11\0\3\215\1\0\1\216\2\215\6\0"+
    "\23\215\1\0\1\217\1\0\2\217\11\0\4\217\3\0"+
    "\10\217\2\0\2\217\6\0\23\217\1\0\1\217\1\220"+
    "\2\217\11\0\4\217\3\0\10\217\2\0\2\217\6\0"+
    "\23\217\3\0\1\221\12\0\3\221\11\0\3\221\2\0"+
    "\2\221\6\0\23\221\3\0\1\221\1\222\11\0\3\221"+
    "\11\0\3\221\2\0\2\221\6\0\23\221\3\0\1\223"+
    "\12\0\3\223\11\0\3\223\2\0\2\223\6\0\23\223"+
    "\3\0\1\223\12\0\3\223\11\0\3\223\1\0\1\224"+
    "\2\223\6\0\23\223\1\0\1\225\1\0\2\225\11\0"+
    "\4\225\3\0\10\225\2\0\2\225\6\0\23\225\1\0"+
    "\1\225\1\226\2\225\11\0\4\225\3\0\10\225\2\0"+
    "\2\225\6\0\23\225\3\0\1\227\12\0\3\227\11\0"+
    "\3\227\2\0\2\227\6\0\23\227\3\0\1\227\1\230"+
    "\11\0\3\227\11\0\3\227\2\0\2\227\6\0\23\227"+
    "\3\0\1\231\12\0\3\231\11\0\3\231\2\0\2\231"+
    "\6\0\23\231\3\0\1\231\12\0\3\231\11\0\3\231"+
    "\1\0\1\232\2\231\6\0\23\231\1\0\1\233\1\0"+
    "\2\233\11\0\4\233\3\0\10\233\2\0\2\233\6\0"+
    "\23\233\1\0\1\233\1\234\2\233\11\0\4\233\3\0"+
    "\10\233\2\0\2\233\6\0\23\233\3\0\1\235\12\0"+
    "\3\235\11\0\3\235\2\0\2\235\6\0\23\235\3\0"+
    "\1\235\1\236\11\0\3\235\11\0\3\235\2\0\2\235"+
    "\6\0\23\235\3\0\1\237\12\0\3\237\11\0\3\237"+
    "\2\0\2\237\6\0\23\237\3\0\1\237\12\0\3\237"+
    "\11\0\3\237\1\0\1\240\2\237\6\0\23\237\1\0"+
    "\1\241\1\0\2\241\11\0\4\241\3\0\10\241\2\0"+
    "\2\241\6\0\23\241\1\0\1\241\1\242\2\241\11\0"+
    "\4\241\3\0\10\241\2\0\2\241\6\0\23\241\3\0"+
    "\1\243\12\0\3\243\11\0\3\243\2\0\2\243\6\0"+
    "\23\243\3\0\1\243\1\244\11\0\3\243\11\0\3\243"+
    "\2\0\2\243\6\0\23\243\3\0\1\245\12\0\3\245"+
    "\11\0\3\245\2\0\2\245\6\0\23\245\3\0\1\245"+
    "\10\0\1\137\1\140\3\245\2\0\1\137\6\0\3\245"+
    "\1\0\1\246\2\245\6\0\23\245\1\0\1\247\1\0"+
    "\2\247\11\0\4\247\3\0\10\247\2\0\2\247\6\0"+
    "\23\247\1\0\1\247\1\250\2\247\11\0\4\247\3\0"+
    "\10\247\2\0\2\247\6\0\23\247\3\0\1\251\12\0"+
    "\3\251\11\0\3\251\2\0\2\251\6\0\23\251\3\0"+
    "\1\251\1\252\11\0\3\251\11\0\3\251\2\0\2\251"+
    "\6\0\23\251\3\0\1\253\12\0\3\253\11\0\3\253"+
    "\2\0\2\253\6\0\23\253\3\0\1\253\12\0\3\253"+
    "\11\0\3\253\1\0\1\254\2\253\6\0\23\253\1\0"+
    "\1\255\1\0\2\255\11\0\4\255\3\0\10\255\2\0"+
    "\2\255\6\0\23\255\1\0\1\255\1\256\2\255\11\0"+
    "\4\255\3\0\10\255\2\0\2\255\6\0\23\255\3\0"+
    "\1\257\12\0\3\257\11\0\3\257\2\0\2\257\6\0"+
    "\23\257\3\0\1\257\1\260\11\0\3\257\11\0\3\257"+
    "\2\0\2\257\6\0\23\257\3\0\1\261\12\0\3\261"+
    "\11\0\3\261\2\0\2\261\6\0\23\261\3\0\1\261"+
    "\12\0\3\261\11\0\3\261\1\0\1\262\2\261\6\0"+
    "\23\261\1\0\1\263\1\0\2\263\11\0\4\263\3\0"+
    "\10\263\2\0\2\263\6\0\23\263\1\0\1\263\1\264"+
    "\2\263\11\0\4\263\3\0\10\263\2\0\2\263\6\0"+
    "\23\263\3\0\1\265\12\0\3\265\11\0\3\265\2\0"+
    "\2\265\6\0\23\265\3\0\1\265\1\266\11\0\3\265"+
    "\11\0\3\265\2\0\2\265\6\0\23\265\3\0\1\267"+
    "\12\0\3\267\11\0\3\267\2\0\2\267\6\0\23\267"+
    "\3\0\1\267\10\0\1\137\1\140\3\267\2\0\1\137"+
    "\6\0\3\267\2\0\2\267\6\0\23\267";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9164];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\1\11\4\1\6\11"+
    "\11\1\5\0\1\11\1\0\2\1\3\0\1\1\1\0"+
    "\1\1\1\0\1\11\2\0\3\1\1\0\2\1\5\0"+
    "\1\11\2\1\4\0\1\1\2\0\1\1\1\0\1\1"+
    "\15\0\1\11\13\0\1\11\127\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol sym(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol sym(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 214) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Scanner error: " + yytext());
            } 
            // fall through
          case 25: break;
          case 2: 
            { ;
            } 
            // fall through
          case 26: break;
          case 3: 
            { return symbol(sym.PV);
            } 
            // fall through
          case 27: break;
          case 4: 
            { return symbol(sym.VAR, yytext() );
            } 
            // fall through
          case 28: break;
          case 5: 
            { return symbol(sym.COMMA);
            } 
            // fall through
          case 29: break;
          case 6: 
            { return symbol(sym.RO);
            } 
            // fall through
          case 30: break;
          case 7: 
            { return symbol(sym.RC);
            } 
            // fall through
          case 31: break;
          case 8: 
            { return symbol(sym.EQ);
            } 
            // fall through
          case 32: break;
          case 9: 
            { return symbol(sym.SO);
            } 
            // fall through
          case 33: break;
          case 10: 
            { return symbol(sym.SC);
            } 
            // fall through
          case 34: break;
          case 11: 
            { return symbol(sym.TRUE);
            } 
            // fall through
          case 35: break;
          case 12: 
            { return symbol(sym.FALSE);
            } 
            // fall through
          case 36: break;
          case 13: 
            { return symbol(sym.QUOTEDS, yytext() );
            } 
            // fall through
          case 37: break;
          case 14: 
            { return symbol(sym.OR);
            } 
            // fall through
          case 38: break;
          case 15: 
            { return symbol(sym.SEP);
            } 
            // fall through
          case 39: break;
          case 16: 
            { return symbol(sym.CMP);
            } 
            // fall through
          case 40: break;
          case 17: 
            { return symbol(sym.NOT);
            } 
            // fall through
          case 41: break;
          case 18: 
            { return symbol(sym.AND);
            } 
            // fall through
          case 42: break;
          case 19: 
            { return symbol(sym.TOK3);
            } 
            // fall through
          case 43: break;
          case 20: 
            { return symbol(sym.WITH);
            } 
            // fall through
          case 44: break;
          case 21: 
            { return symbol(sym.PRINT);
            } 
            // fall through
          case 45: break;
          case 22: 
            { return symbol(sym.FZ_AND);
            } 
            // fall through
          case 46: break;
          case 23: 
            { return symbol(sym.TOK1);
            } 
            // fall through
          case 47: break;
          case 24: 
            { return symbol(sym.TOK2);
            } 
            // fall through
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
