import java_cup.runtime.*;
import java.util.*;
import java.io.*;

init with {:
	table = new HashMap<String, HashMap<String, Integer>>();
:};

parser code {:
	public HashMap<String, HashMap<String, Integer>> table;
	
    public void syntax_error(Symbol current_symbol) {
        StringBuffer m = new StringBuffer("Error");

        if(current_symbol.left != -1) {
            m.append(" in line " + (current_symbol.left + 1));
            m.append(" in column " + (current_symbol.right + 1));
        }
        m.append(", symbol: " + current_symbol);
        m.append(": Syntax Error");

        System.err.println(m);
    }
	
	public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if(info instanceof Symbol) {
            if(((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if(((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }

    public Object stack(int position) {
        return (((Symbol) stack.elementAt(tos + position)).value);
    }
:};

action code {:

:};

terminal SEP, TOK1, TOK2, TOK3, S, EQ, BO, BC, MS, RO, RC, ARROW, PIPE, CM, PRINT_MIN_MAX, PART, M, COL;
terminal String QSTRING;
terminal Integer UINT;
//terminal Double DOUBLE;
//terminal Float REAL;

non terminal prog;
non terminal header, tok1_list, cars, car_name, race, print_min_max;
non terminal HashMap speed_list;
non terminal String NT0, NT1;
non terminal Object[] section_names, performances;
non terminal Float parts, drive_stats;
//non terminal Integer ;
//non terminal Boolean ;

//Precedences and associativities
//lower precedences
//precedence left OR;
//precedence left AND;
//precedence left NOT;
//precedence left MIN, MAJ, MIN_EQ, EQ_MIN, MAJ_EQ, EQ_MAJ, EQ;
//precedence left PLUS, MINUS;
//precedence left STAR, DIV;
//precedence left UMINUS;  //rules for negative numbers (if it is not specified, the numbers are unsigned)
//higher precedences

start with prog;

prog ::= header SEP cars SEP race
;

//////////
//HEADER
//////////

header ::= tok1_list TOK3 S tok1_list TOK2 S tok1_list 
        |  tok1_list TOK2 S tok1_list TOK3 S tok1_list
;

tok1_list ::= tok1_list TOK1 S |
;



//////////
//CARS
//////////

cars ::= cars car_name car_name| car_name car_name
;

car_name ::= QSTRING:k BO speed_list:v BC
             {:
                parser.table.put(k, v);
             :}
;

speed_list ::= speed_list:tab CM QSTRING:k EQ UINT:v MS
            {:
                tab.put(k,v);
                RESULT = tab;
            :}
           |  QSTRING:k EQ UINT:v MS 
            {: 
               RESULT = new HashMap<String,Integer>();
               RESULT.put(k,v);
            :}
;

//////////
//RACE
//////////

race ::= print_min_max performances:x 
        {:
            System.out.println("WINNER: " + x[0] + " " + x[1]);
        :}
;

print_min_max ::= |
                print_min_max PRINT_MIN_MAX RO QSTRING RC RO section_names:min_max RC S    
                {:
                    System.out.println("MIN: " + min_max[0] + " MAX: " + min_max[1]);
                :}
;

section_names ::= section_names:max_min CM QSTRING:s
             {:
                String car = (String)parser.stack(-5);
                HashMap<String, Integer> map = parser.table.get(car);
                Integer speed = (Integer)map.get(s);
                RESULT = new Object[2];
                if(speed < (Integer)max_min[0]) {
                    RESULT[0] = speed;
                    RESULT[1] = max_min[1];
                } else if(speed > (Integer)max_min[1]) {
                    RESULT[0] = max_min[0];
                    RESULT[1] = speed;
                } else {
                    RESULT[0] = max_min[0];
                    RESULT[1] = max_min[1];
                }
             :}
             | QSTRING:s
             {:
                String car = (String)parser.stack(-3);
                HashMap<String, Integer> map = parser.table.get(car);
                Integer speed = (Integer)map.get(s);
                RESULT = new Object[2];
                RESULT[0] = speed;
                RESULT[1] = speed;
             :}
;

performances ::= performances:p QSTRING:car
                {:
                    System.out.println(car);    
                :}
                 ARROW parts:x S 
                {:
                    System.out.println("TOTAL: " + x + " s");
                    RESULT = new Object[2];
                    if((float)p[1] < x){
                        RESULT[0] = p[0];
                        RESULT[1] = p[1];
                    } else {
                        RESULT[0] = car;
                        RESULT[1] = x;
                    }
                :}
            | QSTRING:car
            {:
                System.out.println(car);
            :}
             ARROW parts:x S
             {:
                System.out.println("TOTAL: " + x + " s");
                RESULT = new Object[2];
                RESULT[0] = car;
                RESULT[1] = x;
             :}
;

parts ::= parts:tot PIPE NT1 PART UINT:u COL drive_stats:x
            {:
                System.out.println("PART" + u + ": " + x +" s" );
                RESULT = tot + x;
            :}
             | NT0 PART UINT:u COL drive_stats:x
             {:
                System.out.println("PART" + u + ": " + x +" s" );
                RESULT = x;
             :}
;


NT1 ::= {:
    RESULT = (String)parser.stack(-4);
:}
;

NT0 ::= {:
    RESULT= (String)parser.stack(-2);
:}
;


drive_stats ::= drive_stats:tot CM QSTRING:s UINT:x M 
            {:
                String car = (String)parser.stack(-8);
                HashMap<String, Integer> map = parser.table.get(car);
                Integer speed = (Integer)map.get(s);
                float result = (float)x.intValue() / (float)speed.intValue();
                RESULT = result + tot;

            :}
            | QSTRING:s UINT:x M
            {:
                String car = (String)parser.stack(-6);
                HashMap<String, Integer> map = parser.table.get(car);
                Integer speed = (Integer)map.get(s);
                float result = (float)x.intValue() / (float)speed.intValue();
                RESULT = result;

            :}
;



