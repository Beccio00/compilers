import java_cup.runtime.*;
import java.util.*;
import java.io.*;

init with {:
	table = new HashMap<String, Integer>();
:};

parser code {:
	public HashMap<String, Integer> table;
	
    public void syntax_error(Symbol current_symbol) {
        StringBuffer m = new StringBuffer("Error");

        if(current_symbol.left != -1) {
            m.append(" in line " + (current_symbol.left + 1));
            m.append(" in column " + (current_symbol.right + 1));
        }
        m.append(", symbol: " + current_symbol);
        m.append(": Syntax Error");

        System.err.println(m);
    }
	
	public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if(info instanceof Symbol) {
            if(((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if(((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }

    public Object stack(int position) {
        return (((Symbol) stack.elementAt(tos + position)).value);
    }
:};

action code {:

:};


terminal SEP, TOK1, TOK2, S, EQ, PLUS, MINUS, STAR, DIV, RO, RC, BO, BC;
terminal String ID, COMPARE, WITH, END, PRINT;
terminal Integer UINT;
// terminal Double DOUBLE;
// terminal Float REAL;

non terminal prog;
non terminal header, header1, header2, tok1_list, tok2_list, list_tok1, command, assignment, compere, command_list, comp_list, comp, print_list, print;
// non terminal HashMap;
// non terminal String;
non terminal Integer expr, NT0, NT1; //perch√® contiene ID o 
non terminal Boolean NT2, NT3;

// Precendences and assoctiativities
// lower precedence 
// precedence left OR;
// precedence left AND;
// precedence left NOT;
// precedence left MIN, MAJ, MIN_EQ, MAJ_EQ, EQ_MAJ, EQ_MAJ, EQ;
precedence left PLUS, MINUS;
precedence left STAR, DIV;
// precedence left UMINUS; 

//  higher precedence

start with prog;

prog ::= header SEP command_list 
;

/////////////
// HEADER //
////////////

header ::= header1 | header2
;

header1 ::= tok1_list tok2_list
;

tok1_list ::= tok1_list TOK1 S TOK1 S
	| TOK1 S TOK1 S TOK1 S TOK1 S TOK1 S 
;

tok2_list ::= TOK2 S TOK2 S TOK2 S 
	| TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S 
	 TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S 
; 

header2 ::= TOK2 S list_tok1 TOK2 S list_tok1 TOK2 S list_tok1
;

list_tok1 ::= list_tok1 TOK1 S | 
;



/////////////
// COMPERE //
////////////

command_list ::= command_list command |
;

command ::= assignment | compere
;

compere ::= COMPARE expr WITH comp_list  END S
;

// to compere expr1 and expre2 we have to use a non-terminal marker
// NB: the comparation of NT1 and NT0 it is before the print list 
comp_list ::= comp_list NT1:x expr:y BO
		{:
			if(x==y)
				RESULT = true;
			else
				RESULT = false;

		:}
		print_list BC
		| NT0:x expr:y BO  
		{:
			if(x==y)
				RESULT = true;
			else
				RESULT = false;
		:}
		 print_list BC
;

// before reduce 
NT0 ::= {: RESULT = (Integer)parser.stack(-1);:}
;
//after to reduce NT0 is on the top of the stack

NT1 ::= {: RESULT = (Integer)parser.stack(-2);:}
;

print_list ::= print_list NT3:x PRINT expr:e S
	{:
		if((Boolean)x)
			System.out.println(e);
	:}
	| NT2:x PRINT expr:e S
	{:
		if((Boolean)x)
			System.out.println(e);
	:}
;

NT2 ::= {: RESULT = ((Boolean)parser.stack(0));:}
;

NT3 ::= {: RESULT = (Boolean)parser.stack(-1);:}
;
assignment ::= ID:k EQ expr:v S
	{:
		parser.table.put(k, v);	
	:} 
;
 
expr ::= expr:x MINUS expr:y
	{:
		RESULT = (Integer)x-(Integer)y;	
	:}
	| expr:x PLUS expr:y
	{:
		RESULT = x+y;	
	:}
	| expr:x STAR expr:y
	{:
		RESULT = x*y;	
	:}
	| expr:x DIV expr:y
	{:
		RESULT = x/y;	
	:}
	| RO expr:x RC
	{:
		RESULT = x;	
	:}
	| ID:k
	{:
		RESULT = (Integer)parser.table.get(k); //it is better to do the cast in integer	
	:}
	| UINT:x
	{:
		RESULT = x;	
	:}
;