
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\007\000\002\003" +
    "\005\000\002\003\005\000\002\003\007\000\002\003\007" +
    "\000\002\003\007\000\002\004\004\000\002\004\003\000" +
    "\002\005\004\000\002\005\002\000\002\007\005\000\002" +
    "\007\004\000\002\006\007\000\002\015\006\000\002\015" +
    "\004\000\002\010\004\000\002\010\003\000\002\011\007" +
    "\000\002\020\002\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\004\000\002\016\005\000\002\012\004\000\002\012" +
    "\004\000\002\012\003\000\002\012\003\000\002\013\004" +
    "\000\002\014\004\000\002\021\005\000\002\021\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\006\005\ufff7\006\004\001\002\000\010\004" +
    "\ufff9\005\ufff9\006\ufff9\001\002\000\006\005\106\006\014" +
    "\001\002\000\004\002\105\001\002\000\004\004\017\001" +
    "\002\000\006\005\012\006\011\001\002\000\010\004\ufffa" +
    "\005\ufffa\006\ufffa\001\002\000\010\004\ufff7\005\ufff7\006" +
    "\ufff7\001\002\000\010\004\uffff\005\015\006\014\001\002" +
    "\000\010\004\ufff8\005\ufff8\006\ufff8\001\002\000\006\004" +
    "\ufff7\006\ufff7\001\002\000\006\004\ufffd\006\014\001\002" +
    "\000\004\020\021\001\002\000\004\020\021\001\002\000" +
    "\004\015\074\001\002\000\006\004\023\020\021\001\002" +
    "\000\004\007\027\001\002\000\004\020\021\001\002\000" +
    "\006\004\ufff6\020\ufff6\001\002\000\006\002\000\007\027" +
    "\001\002\000\010\012\034\015\035\027\031\001\002\000" +
    "\006\002\ufff0\007\ufff0\001\002\000\010\012\034\015\035" +
    "\027\031\001\002\000\006\024\066\025\065\001\002\000" +
    "\012\021\uffee\022\uffee\026\041\030\043\001\002\000\010" +
    "\012\034\015\035\027\031\001\002\000\004\014\036\001" +
    "\002\000\004\015\037\001\002\000\006\024\uffe7\025\uffe7" +
    "\001\002\000\010\013\042\026\041\030\043\001\002\000" +
    "\010\012\034\015\035\027\031\001\002\000\014\013\uffe9" +
    "\021\uffe9\022\uffe9\026\uffe9\030\uffe9\001\002\000\010\012" +
    "\034\015\035\027\031\001\002\000\014\013\uffea\021\uffea" +
    "\022\uffea\026\041\030\uffea\001\002\000\014\013\uffeb\021" +
    "\uffeb\022\uffeb\026\uffeb\030\uffeb\001\002\000\006\021\051" +
    "\022\052\001\002\000\004\010\064\001\002\000\006\010" +
    "\uffe4\022\052\001\002\000\004\023\056\001\002\000\004" +
    "\023\056\001\002\000\006\010\uffe3\021\051\001\002\000" +
    "\004\010\uffe5\001\002\000\010\010\uffe1\021\uffe1\023\060" +
    "\001\002\000\004\015\057\001\002\000\012\010\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\001\002\000\004\015\061\001\002" +
    "\000\012\010\uffe0\021\uffe0\022\uffe0\023\uffe0\001\002\000" +
    "\010\010\uffe2\022\uffe2\023\060\001\002\000\004\010\uffe6" +
    "\001\002\000\006\002\uffef\007\uffef\001\002\000\004\031" +
    "\070\001\002\000\004\031\067\001\002\000\014\013\uffec" +
    "\021\uffec\022\uffec\026\uffec\030\uffec\001\002\000\014\013" +
    "\uffed\021\uffed\022\uffed\026\uffed\030\uffed\001\002\000\014" +
    "\013\uffe8\021\uffe8\022\uffe8\026\uffe8\030\uffe8\001\002\000" +
    "\006\002\ufff1\007\ufff1\001\002\000\006\011\076\016\077" +
    "\001\002\000\004\031\075\001\002\000\006\011\ufff2\016" +
    "\ufff2\001\002\000\004\015\102\001\002\000\004\015\100" +
    "\001\002\000\004\017\101\001\002\000\006\004\ufff4\020" +
    "\ufff4\001\002\000\004\031\103\001\002\000\006\011\ufff3" +
    "\016\ufff3\001\002\000\006\004\ufff5\020\ufff5\001\002\000" +
    "\004\002\001\001\002\000\006\005\ufff7\006\004\001\002" +
    "\000\006\005\113\006\014\001\002\000\010\004\ufffe\005" +
    "\111\006\011\001\002\000\006\004\ufff7\006\ufff7\001\002" +
    "\000\006\004\ufffc\006\014\001\002\000\004\006\004\001" +
    "\002\000\006\004\ufffb\006\011\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\012\002\005\003\006\004\007\005\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\015\001\001\000\002\001\001\000\006\006" +
    "\017\007\021\001\001\000\004\006\103\001\001\000\004" +
    "\015\072\001\001\000\004\006\023\001\001\000\006\010" +
    "\025\011\027\001\001\000\004\006\024\001\001\000\002" +
    "\001\001\000\004\011\071\001\001\000\006\016\031\017" +
    "\032\001\001\000\002\001\001\000\006\016\031\017\070" +
    "\001\001\000\002\001\001\000\004\020\045\001\001\000" +
    "\006\016\031\017\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\031\017\044\001\001\000\002\001\001\000\006\016\031" +
    "\017\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\046\013\047\014\052\001\001\000\002\001\001" +
    "\000\004\014\062\001\001\000\004\021\061\001\001\000" +
    "\004\021\054\001\001\000\004\013\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\107\005\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\111\001\001\000\002\001\001\000\004" +
    "\004\113\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	table = new HashMap<String, HashMap<String, Integer>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


	public HashMap<String, HashMap<String, Integer>> table;
	
    public void syntax_error(Symbol current_symbol) {
        StringBuffer m = new StringBuffer("Error");

        if(current_symbol.left != -1) {
            m.append(" in line " + (current_symbol.left + 1));
            m.append(" in column " + (current_symbol.right + 1));
        }
        m.append(", symbol: " + current_symbol);
        m.append(": Syntax Error");

        System.err.println(m);
    }
	
	public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if(info instanceof Symbol) {
            if(((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if(((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }

    public Object stack(int position) {
        return (((Symbol) stack.elementAt(tos + position)).value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP objects SEP queries 
            { parser.Tree.reduce(5,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= tok2l_non_empty TOK1 tok2l_also_empty 
            { parser.Tree.reduce(3,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= tok2l_also_empty TOK1 tok2l_non_empty 
            { parser.Tree.reduce(3,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= tok2l_non_empty TOK1 tok2l_also_empty TOK1 tok2l_also_empty 
            { parser.Tree.reduce(5,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header ::= tok2l_also_empty TOK1 tok2l_non_empty TOK1 tok2l_also_empty 
            { parser.Tree.reduce(5,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header ::= tok2l_also_empty TOK1 tok2l_also_empty TOK1 tok2l_non_empty 
            { parser.Tree.reduce(5,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tok2l_non_empty ::= tok2l_non_empty TOK2 
            { parser.Tree.reduce(2,"tok2l_non_empty",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2l_non_empty",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tok2l_non_empty ::= TOK2 
            { parser.Tree.reduce(1,"tok2l_non_empty",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2l_non_empty",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tok2l_also_empty ::= tok2l_also_empty TOK2 
            { parser.Tree.reduce(2,"tok2l_also_empty",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2l_also_empty",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tok2l_also_empty ::= 
            { parser.Tree.reduce(0,"tok2l_also_empty",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2l_also_empty",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // objects ::= objects object object 
            { parser.Tree.reduce(3,"objects",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objects",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // objects ::= object object 
            { parser.Tree.reduce(2,"objects",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objects",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // object ::= OBJ attr_list NAME QSTRING END 
            { parser.Tree.reduce(5,"object",0);
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		HashMap list = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            parser.table.put(name, list);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("object",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // attr_list ::= attr_list CM QSTRING UINT 
            { parser.Tree.reduce(4,"attr_list",0);
              HashMap RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		HashMap l = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int attr_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int attr_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String attr_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int attr_valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int attr_valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer attr_value = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                l.put(attr_name, attr_value);
                RESULT = l;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // attr_list ::= QSTRING UINT 
            { parser.Tree.reduce(2,"attr_list",0);
              HashMap RESULT =null;
		int attr_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int attr_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String attr_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int attr_valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int attr_valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer attr_value = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new HashMap<String, Integer>();
            RESULT.put(attr_name, attr_value); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // queries ::= queries query 
            { parser.Tree.reduce(2,"queries",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("queries",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // queries ::= query 
            { parser.Tree.reduce(1,"queries",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("queries",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // query ::= INTERR bool_expr NT0 print_function INTERR_MIN 
            { parser.Tree.reduce(5,"query",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("query",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT0 ::= 
            { parser.Tree.reduce(0,"NT0",0);
              Boolean RESULT =null;
		
    RESULT = (Boolean)parser.stack(0);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT0",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bool_expr ::= obj_ref MIN_EQ UINT 
            { parser.Tree.reduce(3,"bool_expr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(x.equals(y)) {
            RESULT = true;
        } else {            
            RESULT = false;
        }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bool_expr ::= obj_ref N_MIN_EQ UINT 
            { parser.Tree.reduce(3,"bool_expr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(!x.equals(y)) {
            RESULT = true;
        } else {
            RESULT = false;
        }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bool_expr ::= bool_expr AND bool_expr 
            { parser.Tree.reduce(3,"bool_expr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a && b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bool_expr ::= bool_expr OR bool_expr 
            { parser.Tree.reduce(3,"bool_expr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a || b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bool_expr ::= RO bool_expr RC 
            { parser.Tree.reduce(3,"bool_expr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bool_expr ::= NOT bool_expr 
            { parser.Tree.reduce(2,"bool_expr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = !a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // obj_ref ::= QSTRING DOT QSTRING 
            { parser.Tree.reduce(3,"obj_ref",0);
              Integer RESULT =null;
		int obj_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int obj_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String obj_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int attr_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int attr_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String attr_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             Integer value = parser.table.get(obj_name).get(attr_name);
             RESULT = value;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_ref",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // print_function ::= print_true print_false 
            { parser.Tree.reduce(2,"print_function",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_function",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // print_function ::= print_false print_true 
            { parser.Tree.reduce(2,"print_function",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_function",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // print_function ::= print_true 
            { parser.Tree.reduce(1,"print_function",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_function",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // print_function ::= print_false 
            { parser.Tree.reduce(1,"print_function",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_function",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // print_true ::= IS_TRUE print_list 
            { parser.Tree.reduce(2,"print_true",0);
              Object RESULT =null;
		int list_strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int list_strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> list_str = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Boolean bool_expr = (Boolean)parser.stack(-3);
        if (bool_expr == true) {
            for (String str : list_str) {
                System.out.println(str);
            }
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_true",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // print_false ::= IS_FALSE print_list 
            { parser.Tree.reduce(2,"print_false",0);
              Object RESULT =null;
		int list_strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int list_strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> list_str = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Boolean bool_expr = (Boolean)parser.stack(-3);
        if (bool_expr == false) {
            for (String str : list_str) {
                System.out.println(str);
            }
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_false",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // print_list ::= print_list PRINT QSTRING 
            { parser.Tree.reduce(3,"print_list",0);
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int print_strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int print_strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String print_str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		        
        l.add(print_str);
        RESULT = l;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // print_list ::= PRINT QSTRING 
            { parser.Tree.reduce(2,"print_list",0);
              ArrayList<String> RESULT =null;
		int print_strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int print_strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String print_str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<String> list = new ArrayList<String>();
        list.add(print_str);
        RESULT = list;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
