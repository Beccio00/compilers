
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\002\007\000\002\003" +
    "\010\000\002\003\004\000\002\004\004\000\002\004\002" +
    "\000\002\005\005\000\002\005\006\000\002\006\006\000" +
    "\002\006\017\000\002\007\005\000\002\007\005\000\002" +
    "\010\006\000\002\015\005\000\002\015\003\000\002\014" +
    "\004\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\003\000" +
    "\002\011\003\000\002\011\002\000\002\012\004\000\002" +
    "\012\003\000\002\013\010\000\002\013\007\000\002\021" +
    "\005\000\002\021\003\000\002\020\005\000\002\017\003" +
    "\000\002\017\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\006\005\006\006\005\001\002\000\006\005" +
    "\107\006\106\001\002\000\004\006\103\001\002\000\006" +
    "\005\ufffc\006\ufffc\001\002\000\004\002\074\001\002\000" +
    "\004\004\011\001\002\000\004\024\014\001\002\000\006" +
    "\004\043\024\014\001\002\000\004\024\014\001\002\000" +
    "\004\015\015\001\002\000\004\024\020\001\002\000\006" +
    "\007\ufff3\014\ufff3\001\002\000\006\007\037\014\036\001" +
    "\002\000\006\016\022\025\021\001\002\000\020\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\017\uffec\001" +
    "\002\000\006\016\022\025\021\001\002\000\016\007\ufff2" +
    "\010\025\011\026\012\024\013\027\014\ufff2\001\002\000" +
    "\006\016\022\025\021\001\002\000\006\016\022\025\021" +
    "\001\002\000\006\016\022\025\021\001\002\000\006\016" +
    "\022\025\021\001\002\000\020\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\013\uffee\014\uffee\017\uffee\001\002\000\020\007" +
    "\ufff1\010\ufff1\011\ufff1\012\024\013\027\014\ufff1\017\ufff1" +
    "\001\002\000\020\007\ufff0\010\ufff0\011\ufff0\012\024\013" +
    "\027\014\ufff0\017\ufff0\001\002\000\020\007\uffef\010\uffef" +
    "\011\uffef\012\uffef\013\uffef\014\uffef\017\uffef\001\002\000" +
    "\014\010\025\011\026\012\024\013\027\017\035\001\002" +
    "\000\020\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\017\uffed\001\002\000\004\024\020\001\002\000\006" +
    "\004\ufff5\024\ufff5\001\002\000\006\007\ufff4\014\ufff4\001" +
    "\002\000\004\024\014\001\002\000\006\004\ufff6\024\ufff6" +
    "\001\002\000\006\002\uffea\024\051\001\002\000\004\024" +
    "\014\001\002\000\006\004\ufff7\024\ufff7\001\002\000\006" +
    "\002\uffe8\024\uffe8\001\002\000\004\002\000\001\002\000" +
    "\006\002\uffeb\024\051\001\002\000\004\025\052\001\002" +
    "\000\006\015\053\020\054\001\002\000\004\025\056\001" +
    "\002\000\004\015\055\001\002\000\004\025\056\001\002" +
    "\000\004\024\064\001\002\000\006\007\062\014\061\001" +
    "\002\000\006\007\uffe4\014\uffe4\001\002\000\004\025\056" +
    "\001\002\000\006\002\uffe7\024\uffe7\001\002\000\006\007" +
    "\uffe5\014\uffe5\001\002\000\010\021\067\022\066\023\065" +
    "\001\002\000\006\007\uffe0\014\uffe0\001\002\000\006\007" +
    "\uffe1\014\uffe1\001\002\000\006\007\uffe2\014\uffe2\001\002" +
    "\000\006\007\uffe3\014\uffe3\001\002\000\006\007\072\014" +
    "\061\001\002\000\006\002\uffe6\024\uffe6\001\002\000\006" +
    "\002\uffe9\024\uffe9\001\002\000\004\002\001\001\002\000" +
    "\006\005\077\006\076\001\002\000\010\004\ufffd\005\ufffd" +
    "\006\ufffd\001\002\000\006\005\ufffc\006\ufffc\001\002\000" +
    "\006\005\101\006\076\001\002\000\006\004\ufffc\006\ufffc" +
    "\001\002\000\006\004\uffff\006\076\001\002\000\004\006" +
    "\104\001\002\000\004\006\105\001\002\000\006\005\ufffa" +
    "\006\ufffa\001\002\000\004\006\125\001\002\000\004\005" +
    "\111\001\002\000\004\004\ufffe\001\002\000\004\005\112" +
    "\001\002\000\004\005\113\001\002\000\006\004\ufff9\005" +
    "\114\001\002\000\004\005\115\001\002\000\004\005\116" +
    "\001\002\000\004\005\117\001\002\000\004\005\120\001" +
    "\002\000\004\005\121\001\002\000\004\005\122\001\002" +
    "\000\004\005\123\001\002\000\004\005\124\001\002\000" +
    "\004\004\ufff8\001\002\000\006\005\ufffb\006\ufffb\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\010\002\006\003\007\005\003\001\001\000" +
    "\004\006\107\001\001\000\002\001\001\000\004\004\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\011\010\012\001\001\000\004\010\043\001\001\000\004" +
    "\010\040\001\001\000\002\001\001\000\006\014\015\015" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\022\001\001\000\002\001\001\000\004\016\033\001" +
    "\001\000\002\001\001\000\004\016\032\001\001\000\004" +
    "\016\031\001\001\000\004\016\030\001\001\000\004\016" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\041\001\001\000\002\001\001\000" +
    "\010\011\046\012\047\013\045\001\001\000\004\010\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\057\021\070\001\001\000\002\001" +
    "\001\000\006\020\057\021\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\077\001\001\000\002\001\001" +
    "\000\004\004\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	table = new HashMap<String, HashMap<String, Float>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


	public HashMap<String, HashMap<String, Float>> table;
	
    public void syntax_error(Symbol current_symbol) {
        StringBuffer m = new StringBuffer("Error");

        if(current_symbol.left != -1) {
            m.append(" in line " + (current_symbol.left + 1));
            m.append(" in column " + (current_symbol.right + 1));
        }
        m.append(", symbol: " + current_symbol);
        m.append(": Syntax Error");

        System.err.println(m);
    }
	
	public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if(info instanceof Symbol) {
            if(((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if(((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }

    public Object stack(int position) {
        return (((Symbol) stack.elementAt(tos + position)).value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP athletes SEP evaluation 
            { parser.Tree.reduce(5,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= TOK1 tok2_list TOK1 tok2_list TOK1 tok2_list 
            { parser.Tree.reduce(6,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= even_tok2_list tok1_list 
            { parser.Tree.reduce(2,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tok2_list ::= tok2_list TOK2 
            { parser.Tree.reduce(2,"tok2_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tok2_list ::= 
            { parser.Tree.reduce(0,"tok2_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // even_tok2_list ::= even_tok2_list TOK2 TOK2 
            { parser.Tree.reduce(3,"even_tok2_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("even_tok2_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // even_tok2_list ::= TOK2 TOK2 TOK2 TOK2 
            { parser.Tree.reduce(4,"even_tok2_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("even_tok2_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tok1_list ::= TOK1 TOK1 TOK1 TOK1 
            { parser.Tree.reduce(4,"tok1_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tok1_list ::= TOK1 TOK1 TOK1 TOK1 TOK1 TOK1 TOK1 TOK1 TOK1 TOK1 TOK1 TOK1 TOK1 
            { parser.Tree.reduce(13,"tok1_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // athletes ::= athletes athlete athlete 
            { parser.Tree.reduce(3,"athletes",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("athletes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // athletes ::= athlete athlete athlete 
            { parser.Tree.reduce(3,"athletes",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("athletes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // athlete ::= QSTRING COL list_attr S 
            { parser.Tree.reduce(4,"athlete",0);
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tableft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tabright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap tab = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("athlete",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // list_attr ::= list_attr CM attr 
            { parser.Tree.reduce(3,"list_attr",0);
              HashMap RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap prev = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tableft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tabright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap tab = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String name = (String)parser.stack(-4); 
                HashMap<String, Float> current = parser.table.get(name);
                
                if (current == null) {
                    current = new HashMap<String, Float>();
                }
                
                current.putAll(tab);
                parser.table.put(name, current);
                
                prev.putAll(tab);
                RESULT = prev;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_attr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // list_attr ::= attr 
            { parser.Tree.reduce(1,"list_attr",0);
              HashMap RESULT =null;
		int tableft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tabright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap tab = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String name = (String)parser.stack(-3);
                parser.table.put(name, tab);
                RESULT = tab;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_attr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // attr ::= QSTRING expr 
            { parser.Tree.reduce(2,"attr",0);
              HashMap RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String attr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float v = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new HashMap<String, Float>();
        RESULT.put(attr, v);	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr MINUS expr 
            { parser.Tree.reduce(3,"expr",0);
              Float RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float y = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = x-y;	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr PLUS expr 
            { parser.Tree.reduce(3,"expr",0);
              Float RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float y = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = x+y;	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr STAR expr 
            { parser.Tree.reduce(3,"expr",0);
              Float RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float y = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = x*y;	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr DIV expr 
            { parser.Tree.reduce(3,"expr",0);
              Float RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float y = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = x/y;	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= RO expr RC 
            { parser.Tree.reduce(3,"expr",0);
              Float RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = x;	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= REAL 
            { parser.Tree.reduce(1,"expr",0);
              Float RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = x;	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // evaluation ::= eval_list 
            { parser.Tree.reduce(1,"evaluation",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("evaluation",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // evaluation ::= 
            { parser.Tree.reduce(0,"evaluation",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("evaluation",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // eval_list ::= eval_list eval 
            { parser.Tree.reduce(2,"eval_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eval_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // eval_list ::= eval 
            { parser.Tree.reduce(1,"eval_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eval_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // eval ::= QSTRING REAL POINT COL val_list S 
            { parser.Tree.reduce(6,"eval",0);
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Float mult = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float sum = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            System.out.println(name + ": " + sum + " POINTS");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eval",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // eval ::= QSTRING REAL COL val_list S 
            { parser.Tree.reduce(5,"eval",0);
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Float mult = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float sum = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        System.out.println(name + ": " + sum + " POINTS");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eval",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // val_list ::= val_list CM val 
            { parser.Tree.reduce(3,"val_list",0);
              Float RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float prev = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int curleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int curright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float cur = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = prev + cur;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // val_list ::= val 
            { parser.Tree.reduce(1,"val_list",0);
              Float RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float v = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = v;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // val ::= REAL QSTRING score 
            { parser.Tree.reduce(3,"val",0);
              Float RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float value = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int attr_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int attr_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String attr_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float s = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          String name = (String)parser.stack(-5);
          Float mult = (Float)parser.stack(-4);
          
          HashMap<String, Float> athlete_attrs = parser.table.get(name);
          Float expr_value = athlete_attrs.get(attr_name);
          
          Float result = mult * value * expr_value * s;
          
          System.out.println("  " + attr_name + ": " + mult + " * " + value + " * " + expr_value + " * " + s + " = " + result);
                           
          RESULT = result;                 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // score ::= LOW 
            { parser.Tree.reduce(1,"score",0);
              Float RESULT =null;
		
            RESULT = 0.0f;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("score",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // score ::= MEDIUM 
            { parser.Tree.reduce(1,"score",0);
              Float RESULT =null;
		
            RESULT = 1.0f;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("score",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // score ::= HIGH 
            { parser.Tree.reduce(1,"score",0);
              Float RESULT =null;
		
            RESULT = 2.0f;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("score",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
